{
  "address": "0xACA0A67E9caE05b62dcFCe7B74A29c0Ea0b97901",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOrganizationManager",
          "name": "_orgManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "PrizeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "PrizeCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "createPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        }
      ],
      "name": "getPrize",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orgId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "internalType": "struct Prizes.Prize",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        }
      ],
      "name": "listPrizes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stocks",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "nftContracts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "baseURI",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orgManager",
      "outputs": [
        {
          "internalType": "contract IOrganizationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb40494446fccf9924db1c8b9080a7287823928d89b0c463c44d058a48eaa0751",
  "receipt": {
    "to": null,
    "from": "0x6875548D549dB2D6D99B29E0BA6ea7f7C53739D1",
    "contractAddress": "0xACA0A67E9caE05b62dcFCe7B74A29c0Ea0b97901",
    "transactionIndex": 1,
    "gasUsed": "2750340",
    "logsBloom": "0x
    "blockHash": "0xc92e8c4e7dfc4331de690ebbbdd1c9d3a6942027370376af7fc5d5835129694b",
    "transactionHash": "0xb40494446fccf9924db1c8b9080a7287823928d89b0c463c44d058a48eaa0751",
    "logs": [],
    "blockNumber": 26814439,
    "cumulativeGasUsed": "2796448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x44fbD88018fa0Ee4e45cCf1AD92eAFA4D695318F"
  ],
  "numDeployments": 2,
  "solcInputHash": "d9392d1df9407e1acd45ca5ff3d8e6e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOrganizationManager\",\"name\":\"_orgManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"PrizeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"createPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"}],\"name\":\"getPrize\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct Prizes.Prize\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"}],\"name\":\"listPrizes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stocks\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"baseURI\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orgManager\",\"outputs\":[{\"internalType\":\"contract IOrganizationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimPrize(uint256,uint256,uint256)\":{\"details\":\"El usuario debe haber aprobado previamente a este contrato (`Prizes`)      para gastar `amount * price` tokens de la organizaci\\u00f3n.      Los tokens pagados son transferidos a la tesorer\\u00eda de la organizaci\\u00f3n (OrganizationManager).\",\"params\":{\"amount\":\"Cantidad de unidades que se reclaman\",\"orgId\":\"ID de la organizaci\\u00f3n\",\"prizeId\":\"ID del premio\"}},\"createPrize(uint256,string,string,uint256,uint256,string)\":{\"params\":{\"baseURI\":\"Image cid in Filebase\",\"description\":\"Descripci\\u00f3n del premio\",\"name\":\"Nombre del premio\",\"orgId\":\"ID de la organizaci\\u00f3n\",\"price\":\"Precio (en tokens de la organizaci\\u00f3n) para reclamar 1 unidad\",\"stock\":\"Cantidad inicial de unidades disponibles de este premio\"}},\"listPrizes(uint256)\":{\"details\":\"Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar     sin problema mientras las strings sean memoria.     Tambi\\u00e9n retornamos el `prizeId` como \\u00edndice para que el front lo identifique.\",\"params\":{\"orgId\":\"ID de la organizaci\\u00f3n\"},\"returns\":{\"baseURI\":\"Lista de cids de im\\u00e1genes de premios\",\"descriptions\":\"Lista de descripciones\",\"ids\":\"Lista de IDs (\\u00edndices) de cada premio\",\"names\":\"Lista de nombres\",\"nftContracts\":\"Lista de direcciones de contratos NFT\",\"prices\":\"Lista de precios\",\"stocks\":\"Lista de stocks\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimPrize(uint256,uint256,uint256)\":{\"notice\":\"Reclama `amount` unidades de un premio (paga en tokens de la org).\"},\"createPrize(uint256,string,string,uint256,uint256,string)\":{\"notice\":\"Crea un nuevo premio para la organizaci\\u00f3n `orgId`.\"},\"listPrizes(uint256)\":{\"notice\":\"Lista todos los premios de una organizaci\\u00f3n, incluyendo su ID e informaci\\u00f3n.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Prizes/Prizes.sol\":\"Prizes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Organization/IOrganizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IOrganizationManager {\\n    function isAdmin(uint256 _orgId, address _user) external view returns (bool);\\n    function getTokenOfOrg(uint256 _orgId) external view returns (address);\\n    function getBalanceOfOrg(uint256 _orgId) external view returns (uint256);\\n    function getBalanceOfUser(uint256 _orgId, address _user) external view returns (uint256, string memory);\\n    function transferTokensTo(uint256 _orgId, address _destAddress, uint256 _amount) external;\\n    function mintOrganizationToken(uint256 _orgId, uint256 _amount) external;\\n    function fundOrganization(uint256 _orgId) external payable;\\n}\\n\",\"keccak256\":\"0xa7714d879a9307e11ce333bfda0d57599a26fa5bb1cbab77f2065901ed7f1fda\",\"license\":\"MIT\"},\"contracts/Prizes/Prizes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../Organization/IOrganizationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// NFT contract for prizes\\ncontract PrizeNFT is ERC721URIStorage, Ownable {\\n    uint256 private _nextTokenId;\\n    \\n    string private _baseTokenURI;\\n    \\n    constructor(string memory name, string memory symbol, string memory baseTokenURI) \\n        ERC721(name, symbol) \\n        Ownable(msg.sender)\\n    {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n    \\n    function mint(address to) external onlyOwner returns (uint256) {\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        return tokenId;\\n    }\\n    \\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n}\\n\\ncontract Prizes {\\n    // -------------------------------------------------------------------------\\n    // ESTRUCTURAS Y ALMACENAMIENTO\\n    // -------------------------------------------------------------------------\\n\\n    struct Prize {\\n        // Como se pide: name, description, price, stock\\n        string name;\\n        string description;\\n        uint256 price;\\n        uint256 stock;\\n        uint256 orgId;\\n        address nftContract; // Address of the deployed NFT contract for this prize\\n        string baseURI; // Image cid in Filebase\\n    }\\n\\n    mapping(uint256 => Prize) private prizes; // prizeId => Prize\\n    uint256 private nextPrizeId;\\n\\n    // prizesByOrg[orgId] => array din\\u00e1mico de premios de esa organizaci\\u00f3n\\n    mapping(uint256 => uint256[]) private prizeIdsByOrg;\\n\\n    // Referencia al OrganizationManager para verificar admins y miembros,\\n    // y para obtener el token de la org.\\n    IOrganizationManager public orgManager;\\n\\n    // EVents\\n    event PrizeCreated(\\n        uint256 indexed prizeId,\\n        uint256 indexed orgId,\\n        string name,\\n        string description,\\n        uint256 price,\\n        uint256 stock,\\n        address nftContract,\\n        string baseURI\\n    );\\n\\n    event PrizeClaimed(\\n        uint256 indexed prizeId,\\n        uint256 indexed orgId,\\n        uint256 amount,\\n        address claimer,\\n        uint256 cost,\\n        uint256[] nftIds\\n    );\\n\\n    // -------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    // -------------------------------------------------------------------------\\n\\n    constructor(IOrganizationManager _orgManager) {\\n        orgManager = _orgManager;\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // MODIFICADORES\\n    // -------------------------------------------------------------------------\\n\\n    /// @dev Verifica si msg.sender es admin en la org correspondiente\\n    modifier onlyOrgAdmin(uint256 orgId) {\\n        require(\\n            orgManager.isAdmin(orgId, msg.sender),\\n            \\\"Prizes: caller is not an admin of this org\\\"\\n        );\\n        _;\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // FUNCIONES PRINCIPALES\\n    // -------------------------------------------------------------------------\\n\\n    /// @notice Step 1: Create NFT contract for a prize\\n    /// @param name Name of the prize (and NFT)\\n    /// @param baseURI Image cid in Filebase\\n    /// @return NFT contract address\\n    function _createNFTContract(string memory name, uint256 prizeIndex, string memory baseURI)\\n    internal\\n    returns (address)\\n    {\\n        string memory symbol = string(abi.encodePacked(\\\"PRIZE\\\", Strings.toString(prizeIndex)));\\n        \\n        PrizeNFT nftContract = new PrizeNFT(name, symbol, baseURI);\\n        return address(nftContract);\\n    }\\n    \\n    /// @notice Step 2: Store prize data and link to organization\\n    /// @param prizeId ID for the new prize\\n    /// @param orgId Organization ID\\n    /// @param name Prize name\\n    /// @param description Prize description\\n    /// @param price Prize price in org tokens\\n    /// @param stock Initial stock amount\\n    /// @param nftContract Address of the NFT contract\\n    /// @param baseURI Image cid in Filebase\\n    function _storePrize(\\n        uint256 prizeId,\\n        uint256 orgId,\\n        string memory name,\\n        string memory description,\\n        uint256 price,\\n        uint256 stock,\\n        address nftContract,\\n        string memory baseURI\\n    )\\n    internal\\n    {\\n        Prize memory newPrize = Prize({\\n            name: name,\\n            description: description,\\n            price: price,\\n            stock: stock,\\n            orgId: orgId,\\n            nftContract: nftContract,\\n            baseURI: baseURI\\n        });\\n        \\n        prizes[prizeId] = newPrize;\\n        prizeIdsByOrg[orgId].push(prizeId);\\n        \\n        emit PrizeCreated(\\n            prizeId,\\n            orgId,\\n            name,\\n            description,\\n            price,\\n            stock,\\n            nftContract,\\n            baseURI\\n        );\\n    }\\n\\n    /// @notice Crea un nuevo premio para la organizaci\\u00f3n `orgId`.\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @param name Nombre del premio\\n    /// @param description Descripci\\u00f3n del premio\\n    /// @param price Precio (en tokens de la organizaci\\u00f3n) para reclamar 1 unidad\\n    /// @param stock Cantidad inicial de unidades disponibles de este premio\\n    /// @param baseURI Image cid in Filebase\\n    function createPrize(\\n        uint256 orgId,\\n        string calldata name,\\n        string calldata description,\\n        uint256 price,\\n        uint256 stock,\\n        string calldata baseURI\\n    )\\n    external\\n    onlyOrgAdmin(orgId)\\n    {\\n        uint256 prizeId = nextPrizeId++;\\n        \\n        // Step 1: Create NFT contract\\n        address nftContract = _createNFTContract(name, prizeId, baseURI);\\n        \\n        // Step 2: Store prize data\\n        _storePrize(\\n            prizeId,\\n            orgId,\\n            name,\\n            description,\\n            price,\\n            stock,\\n            nftContract,\\n            baseURI\\n        );\\n    }\\n\\n    function getPrize(uint256 prizeId) external view returns (Prize memory) {\\n        return prizes[prizeId];\\n    }\\n\\n    /// @notice Lista todos los premios de una organizaci\\u00f3n, incluyendo su ID e informaci\\u00f3n.\\n    /// @dev Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar\\n    ///     sin problema mientras las strings sean memoria.\\n    ///     Tambi\\u00e9n retornamos el `prizeId` como \\u00edndice para que el front lo identifique.\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @return ids Lista de IDs (\\u00edndices) de cada premio\\n    /// @return names Lista de nombres\\n    /// @return descriptions Lista de descripciones\\n    /// @return prices Lista de precios\\n    /// @return stocks Lista de stocks\\n    /// @return nftContracts Lista de direcciones de contratos NFT\\n    /// @return baseURI Lista de cids de im\\u00e1genes de premios\\n    function listPrizes(uint256 orgId)\\n    external\\n    view\\n    returns (\\n        uint256[] memory ids,\\n        string[] memory names,\\n        string[] memory descriptions,\\n        uint256[] memory prices,\\n        uint256[] memory stocks,\\n        address[] memory nftContracts,\\n        string[] memory baseURI\\n    )\\n    {\\n        uint256[] memory prizeIds = prizeIdsByOrg[orgId];\\n        uint256 length = prizeIds.length;\\n\\n        ids = new uint256[](length);\\n        names = new string[](length);\\n        descriptions = new string[](length);\\n        prices = new uint256[](length);\\n        stocks = new uint256[](length);\\n        nftContracts = new address[](length);\\n        baseURI = new string[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 prizeId = prizeIds[i];\\n            Prize storage p = prizes[prizeId];\\n            \\n            ids[i] = prizeId;\\n            names[i] = p.name;\\n            descriptions[i] = p.description;\\n            prices[i] = p.price;\\n            stocks[i] = p.stock;\\n            nftContracts[i] = p.nftContract;\\n            baseURI[i] = p.baseURI;\\n        }\\n    }\\n\\n    /// @notice Reclama `amount` unidades de un premio (paga en tokens de la org).\\n    /// @dev El usuario debe haber aprobado previamente a este contrato (`Prizes`)\\n    ///      para gastar `amount * price` tokens de la organizaci\\u00f3n.\\n    ///      Los tokens pagados son transferidos a la tesorer\\u00eda de la organizaci\\u00f3n (OrganizationManager).\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @param prizeId ID del premio\\n    /// @param amount Cantidad de unidades que se reclaman\\n    function claimPrize(uint256 orgId, uint256 prizeId, uint256 amount)\\n    external\\n    {\\n        require(amount > 0, \\\"Prizes: amount must be > 0\\\");\\n\\n        Prize storage p = prizes[prizeId];\\n        require(p.orgId == orgId, \\\"Prizes: prize not from this org\\\");\\n        require(p.stock >= amount, \\\"Prizes: not enough stock\\\");\\n\\n        uint256 cost = p.price * amount;\\n\\n        address tokenAddress = orgManager.getTokenOfOrg(orgId);\\n        require(tokenAddress != address(0), \\\"Prizes: invalid token for org\\\");\\n\\n        p.stock -= amount;\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), cost);\\n        IERC20(tokenAddress).transfer(address(orgManager), cost);\\n\\n        uint256[] memory nftIds = new uint256[](amount);\\n        for (uint256 i = 0; i < amount; i++) {\\n            nftIds[i] = PrizeNFT(p.nftContract).mint(msg.sender);\\n        }\\n\\n        emit PrizeClaimed(prizeId, orgId, amount, msg.sender, cost, nftIds);\\n    }\\n}\\n\",\"keccak256\":\"0x9c43baa94252492a3f0e40a9496fef9e9fea2622bde568f622f1f6194150da53\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516130ff3803806130ff83398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61306c806100936000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80632e42b0cd14620000635780635c1a70e114620000985780637d96da0014620000b1578063a1099bf214620000de578063f6c942301462000104575b600080fd5b6200007a620000743660046200132b565b6200011b565b6040516200008f97969594939291906200142c565b60405180910390f35b620000af620000a93660046200154a565b620006ec565b005b600354620000c5906001600160a01b031681565b6040516001600160a01b0390911681526020016200008f565b620000f5620000ef3660046200132b565b6200092a565b6040516200008f91906200160d565b620000af62000115366004620016a5565b62000b96565b60608060608060608060606000600260008a81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200018757602002820191906000526020600020905b81548152602001906001019080831162000172575b50508351939450839250505067ffffffffffffffff811115620001ae57620001ae620016d2565b604051908082528060200260200182016040528015620001d8578160200160208202803683370190505b5098508067ffffffffffffffff811115620001f757620001f7620016d2565b6040519080825280602002602001820160405280156200022c57816020015b6060815260200190600190039081620002165790505b5097508067ffffffffffffffff8111156200024b576200024b620016d2565b6040519080825280602002602001820160405280156200028057816020015b60608152602001906001900390816200026a5790505b5096508067ffffffffffffffff8111156200029f576200029f620016d2565b604051908082528060200260200182016040528015620002c9578160200160208202803683370190505b5095508067ffffffffffffffff811115620002e857620002e8620016d2565b60405190808252806020026020018201604052801562000312578160200160208202803683370190505b5094508067ffffffffffffffff811115620003315762000331620016d2565b6040519080825280602002602001820160405280156200035b578160200160208202803683370190505b5093508067ffffffffffffffff8111156200037a576200037a620016d2565b604051908082528060200260200182016040528015620003af57816020015b6060815260200190600190039081620003995790505b50925060005b81811015620006de576000838281518110620003d557620003d5620016e8565b6020026020010151905060008060008381526020019081526020016000209050818c84815181106200040b576200040b620016e8565b6020908102919091010152805481906200042590620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200045390620016fe565b8015620004a45780601f106200047857610100808354040283529160200191620004a4565b820191906000526020600020905b8154815290600101906020018083116200048657829003601f168201915b50505050508b8481518110620004be57620004be620016e8565b6020026020010181905250806001018054620004da90620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200050890620016fe565b8015620005595780601f106200052d5761010080835404028352916020019162000559565b820191906000526020600020905b8154815290600101906020018083116200053b57829003601f168201915b50505050508a8481518110620005735762000573620016e8565b60200260200101819052508060020154898481518110620005985762000598620016e8565b6020026020010181815250508060030154888481518110620005be57620005be620016e8565b6020908102919091010152600581015487516001600160a01b0390911690889085908110620005f157620005f1620016e8565b60200260200101906001600160a01b031690816001600160a01b0316815250508060060180546200062290620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200065090620016fe565b8015620006a15780601f106200067557610100808354040283529160200191620006a1565b820191906000526020600020905b8154815290600101906020018083116200068357829003601f168201915b5050505050868481518110620006bb57620006bb620016e8565b602002602001018190525050508080620006d59062001750565b915050620003b5565b505050919395979092949650565b60035460405163146a291160e01b8152600481018b90523360248201528a916001600160a01b03169063146a291190604401602060405180830381865afa1580156200073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076291906200176c565b620007c75760405162461bcd60e51b815260206004820152602a60248201527f5072697a65733a2063616c6c6572206973206e6f7420616e2061646d696e206f604482015269662074686973206f726760b01b60648201526084015b60405180910390fd5b6001805460009182620007da8362001750565b9190505590506000620008598b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981528793509150899089908190840183828082843760009201919091525062000fe092505050565b90506200091c828d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c81528f93508e925089918e908e90819084018382808284376000920191909152506200105a92505050565b505050505050505050505050565b620009746040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60008281526020819052604090819020815160e081019092528054829082906200099e90620016fe565b80601f0160208091040260200160405190810160405280929190818152602001828054620009cc90620016fe565b801562000a1d5780601f10620009f15761010080835404028352916020019162000a1d565b820191906000526020600020905b815481529060010190602001808311620009ff57829003601f168201915b5050505050815260200160018201805462000a3890620016fe565b80601f016020809104026020016040519081016040528092919081815260200182805462000a6690620016fe565b801562000ab75780601f1062000a8b5761010080835404028352916020019162000ab7565b820191906000526020600020905b81548152906001019060200180831162000a9957829003601f168201915b505050918352505060028201546020820152600382015460408201526004820154606082015260058201546001600160a01b0316608082015260068201805460a09092019162000b0790620016fe565b80601f016020809104026020016040519081016040528092919081815260200182805462000b3590620016fe565b801562000b865780601f1062000b5a5761010080835404028352916020019162000b86565b820191906000526020600020905b81548152906001019060200180831162000b6857829003601f168201915b5050505050815250509050919050565b6000811162000be85760405162461bcd60e51b815260206004820152601a60248201527f5072697a65733a20616d6f756e74206d757374206265203e20300000000000006044820152606401620007be565b60008281526020819052604090206004810154841462000c4b5760405162461bcd60e51b815260206004820152601f60248201527f5072697a65733a207072697a65206e6f742066726f6d2074686973206f7267006044820152606401620007be565b818160030154101562000ca15760405162461bcd60e51b815260206004820152601860248201527f5072697a65733a206e6f7420656e6f7567682073746f636b00000000000000006044820152606401620007be565b600082826002015462000cb5919062001797565b600354604051631bc7046d60e01b8152600481018890529192506000916001600160a01b0390911690631bc7046d90602401602060405180830381865afa15801562000d05573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2b9190620017b1565b90506001600160a01b03811662000d855760405162461bcd60e51b815260206004820152601d60248201527f5072697a65733a20696e76616c696420746f6b656e20666f72206f72670000006044820152606401620007be565b8383600301600082825462000d9b9190620017dc565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af115801562000df4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e1a91906200176c565b5060035460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529082169063a9059cbb906044016020604051808303816000875af115801562000e6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e9591906200176c565b5060008467ffffffffffffffff81111562000eb45762000eb4620016d2565b60405190808252806020026020018201604052801562000ede578160200160208202803683370190505b50905060005b8581101562000f955760058501546040516335313c2160e11b81523360048201526001600160a01b0390911690636a627842906024016020604051808303816000875af115801562000f3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f609190620017f2565b82828151811062000f755762000f75620016e8565b60209081029190910101528062000f8c8162001750565b91505062000ee4565b5086867fb85716fe4d9704daf275d8a712d517c86b008ec56dafe1f9fb03d7fb52e278838733878660405162000fcf94939291906200180c565b60405180910390a350505050505050565b60008062000fee84620011a3565b60405160200162001000919062001845565b6040516020818303038152906040529050600085828560405162001024906200131d565b620010329392919062001874565b604051809103906000f0801580156200104f573d6000803e3d6000fd5b509695505050505050565b6040805160e081018252878152602080820188905281830187905260608201869052608082018a90526001600160a01b03851660a083015260c0820184905260008b8152908190529190912081518291908190620010b9908262001906565b5060208201516001820190620010d0908262001906565b5060408201516002820155606082015160038201556080820151600482015560a08201516005820180546001600160a01b0319166001600160a01b0390921691909117905560c082015160068201906200112b908262001906565b5050506000888152600260209081526040808320805460018101825590845291909220018a90555188908a907fcee297ce481efd27dd3a430b155c515baca2f4aa3be3eb0338063214f0e3ff599062001190908b908b908b908b908b908b90620019d3565b60405180910390a3505050505050505050565b60606000620011b2836200123d565b600101905060008167ffffffffffffffff811115620011d557620011d5620016d2565b6040519080825280601f01601f19166020018201604052801562001200576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200120a57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106200127d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310620012aa576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620012c957662386f26fc10000830492506010015b6305f5e1008310620012e2576305f5e100830492506008015b6127108310620012f757612710830492506004015b606483106200130a576064830492506002015b600a831062001317576001015b92915050565b6115fa8062001a3d83390190565b6000602082840312156200133e57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015620013775781518752958201959082019060010162001359565b509495945050505050565b60005b838110156200139f57818101518382015260200162001385565b50506000910152565b60008151808452620013c281602086016020860162001382565b601f01601f19169290920160200192915050565b6000815180845260208085019450848260051b860182860160005b858110156200141f5783830389526200140c838351620013a8565b98850198925090840190600101620013f1565b5090979650505050505050565b60e0815260006200144160e083018a62001345565b60208382038185015262001456828b620013d6565b915083820360408501526200146c828a620013d6565b9150838203606085015262001482828962001345565b9150838203608085015262001498828862001345565b84810360a0860152865180825282880193509082019060005b81811015620014d85784516001600160a01b031683529383019391830191600101620014b1565b505084810360c0860152620014ee8187620013d6565b9c9b505050505050505050505050565b60008083601f8401126200151157600080fd5b50813567ffffffffffffffff8111156200152a57600080fd5b6020830191508360208285010111156200154357600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156200156957600080fd5b8935985060208a013567ffffffffffffffff808211156200158957600080fd5b620015978d838e01620014fe565b909a50985060408c0135915080821115620015b157600080fd5b620015bf8d838e01620014fe565b909850965060608c0135955060808c0135945060a08c0135915080821115620015e757600080fd5b50620015f68c828d01620014fe565b915080935050809150509295985092959850929598565b602081526000825160e060208401526200162c610100840182620013a8565b90506020840151601f19808584030160408601526200164c8383620013a8565b92506040860151606086015260608601516080860152608086015160a086015260018060a01b0360a08701511660c086015260c08601519150808584030160e0860152506200169c8282620013a8565b95945050505050565b600080600060608486031215620016bb57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200171357607f821691505b6020821081036200173457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016200176557620017656200173a565b5060010190565b6000602082840312156200177f57600080fd5b815180151581146200179057600080fd5b9392505050565b80820281158282048414176200131757620013176200173a565b600060208284031215620017c457600080fd5b81516001600160a01b03811681146200179057600080fd5b818103818111156200131757620013176200173a565b6000602082840312156200180557600080fd5b5051919050565b84815260018060a01b03841660208201528260408201526080606082015260006200183b608083018462001345565b9695505050505050565b645052495a4560d81b8152600082516200186781600585016020870162001382565b9190910160050192915050565b606081526000620018896060830186620013a8565b82810360208401526200189d8186620013a8565b905082810360408401526200183b8185620013a8565b601f8211156200190157600081815260208120601f850160051c81016020861015620018dc5750805b601f850160051c820191505b81811015620018fd57828155600101620018e8565b5050505b505050565b815167ffffffffffffffff811115620019235762001923620016d2565b6200193b81620019348454620016fe565b84620018b3565b602080601f8311600181146200197357600084156200195a5750858301515b600019600386901b1c1916600185901b178555620018fd565b600085815260208120601f198616915b82811015620019a45788860151825594840194600190910190840162001983565b5085821015620019c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c081526000620019e860c0830189620013a8565b8281036020840152620019fc8189620013a8565b60408401889052606084018790526001600160a01b038616608085015283810360a0850152905062001a2f8185620013a8565b999850505050505050505056fe60806040523480156200001157600080fd5b50604051620015fa380380620015fa8339810160408190526200003491620001c1565b3383836000620000458382620002e1565b506001620000548282620002e1565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009181620000aa565b506009620000a08282620002e1565b50505050620003ad565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012457600080fd5b81516001600160401b0380821115620001415762000141620000fc565b604051601f8301601f19908116603f011681019082821181831017156200016c576200016c620000fc565b816040528381526020925086838588010111156200018957600080fd5b600091505b83821015620001ad57858201830151818301840152908201906200018e565b600093810190920192909252949350505050565b600080600060608486031215620001d757600080fd5b83516001600160401b0380821115620001ef57600080fd5b620001fd8783880162000112565b945060208601519150808211156200021457600080fd5b620002228783880162000112565b935060408601519150808211156200023957600080fd5b50620002488682870162000112565b9150509250925092565b600181811c908216806200026757607f821691505b6020821081036200028857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002dc57600081815260208120601f850160051c81016020861015620002b75750805b601f850160051c820191505b81811015620002d857828155600101620002c3565b5050505b505050565b81516001600160401b03811115620002fd57620002fd620000fc565b62000315816200030e845462000252565b846200028e565b602080601f8311600181146200034d5760008415620003345750858301515b600019600386901b1c1916600185901b178555620002d8565b600085815260208120601f198616915b828110156200037e578886015182559484019460019091019084016200035d565b50858210156200039d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61123d80620003bd6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb4651461021b578063b88d4fde1461022e578063c87b56dd14610241578063e985e9c514610254578063f2fde38b1461026757600080fd5b806370a08231146101e7578063715018a6146101fa5780638da5cb5b1461020257806395d89b411461021357600080fd5b806323b872dd116100de57806323b872dd1461018d57806342842e0e146101a05780636352211e146101b35780636a627842146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e366004610e8b565b61027a565b60405190151581526020015b60405180910390f35b6101406102a5565b60405161012f9190610ef8565b61016061015b366004610f0b565b610337565b6040516001600160a01b03909116815260200161012f565b61018b610186366004610f3b565b610360565b005b61018b61019b366004610f65565b61036f565b61018b6101ae366004610f65565b6103ff565b6101606101c1366004610f0b565b61041f565b6101d96101d4366004610fa1565b61042a565b60405190815260200161012f565b6101d96101f5366004610fa1565b61045d565b61018b6104a5565b6007546001600160a01b0316610160565b6101406104b9565b61018b610229366004610fbc565b6104c8565b61018b61023c36600461100e565b6104d3565b61014061024f366004610f0b565b6104ea565b6101236102623660046110ea565b6105ee565b61018b610275366004610fa1565b61061c565b60006001600160e01b03198216632483248360e11b148061029f575061029f8261065a565b92915050565b6060600080546102b49061111d565b80601f01602080910402602001604051908101604052809291908181526020018280546102e09061111d565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b5050505050905090565b6000610342826106aa565b506000828152600460205260409020546001600160a01b031661029f565b61036b8282336106e3565b5050565b6001600160a01b03821661039e57604051633250574960e11b8152600060048201526024015b60405180910390fd5b60006103ab8383336106f0565b9050836001600160a01b0316816001600160a01b0316146103f9576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610395565b50505050565b61041a838383604051806020016040528060008152506104d3565b505050565b600061029f826106aa565b60006104346107e9565b600880546000918261044583611157565b9190505590506104558382610816565b90505b919050565b60006001600160a01b038216610489576040516322718ad960e21b815260006004820152602401610395565b506001600160a01b031660009081526003602052604090205490565b6104ad6107e9565b6104b76000610830565b565b6060600180546102b49061111d565b61036b338383610882565b6104de84848461036f565b6103f984848484610921565b60606104f5826106aa565b506000828152600660205260408120805461050f9061111d565b80601f016020809104026020016040519081016040528092919081815260200182805461053b9061111d565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b505050505090506000610599610a4a565b905080516000036105ab575092915050565b8151156105dd5780826040516020016105c592919061117e565b60405160208183030381529060405292505050919050565b6105e684610a59565b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6106246107e9565b6001600160a01b03811661064e57604051631e4fbdf760e01b815260006004820152602401610395565b61065781610830565b50565b60006001600160e01b031982166380ac58cd60e01b148061068b57506001600160e01b03198216635b5e139f60e01b145b8061029f57506301ffc9a760e01b6001600160e01b031983161461029f565b6000818152600260205260408120546001600160a01b03168061045557604051637e27328960e01b815260048101849052602401610395565b61041a8383836001610ac1565b6000828152600260205260408120546001600160a01b039081169083161561071d5761071d818486610bc7565b6001600160a01b0381161561075b5761073a600085600080610ac1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561078a576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6007546001600160a01b031633146104b75760405163118cdaa760e01b8152336004820152602401610395565b61036b828260405180602001604052806000815250610c2b565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166108b457604051630b61174360e31b81526001600160a01b0383166004820152602401610395565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156103f957604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906109639033908890879087906004016111ad565b6020604051808303816000875af192505050801561099e575060408051601f3d908101601f1916820190925261099b918101906111ea565b60015b610a07573d8080156109cc576040519150601f19603f3d011682016040523d82523d6000602084013e6109d1565b606091505b5080516000036109ff57604051633250574960e11b81526001600160a01b0385166004820152602401610395565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610a4357604051633250574960e11b81526001600160a01b0385166004820152602401610395565b5050505050565b6060600980546102b49061111d565b6060610a64826106aa565b506000610a6f610a4a565b90506000815111610a8f5760405180602001604052806000815250610aba565b80610a9984610c42565b604051602001610aaa92919061117e565b6040516020818303038152906040525b9392505050565b8080610ad557506001600160a01b03821615155b15610b97576000610ae5846106aa565b90506001600160a01b03831615801590610b115750826001600160a01b0316816001600160a01b031614155b8015610b245750610b2281846105ee565b155b15610b4d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610395565b8115610b955783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610bd2838383610cd5565b61041a576001600160a01b038316610c0057604051637e27328960e01b815260048101829052602401610395565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610395565b610c358383610d38565b61041a6000848484610921565b60606000610c4f83610d9d565b600101905060008167ffffffffffffffff811115610c6f57610c6f610ff8565b6040519080825280601f01601f191660200182016040528015610c99576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ca357509392505050565b60006001600160a01b038316158015906105e65750826001600160a01b0316846001600160a01b03161480610d0f5750610d0f84846105ee565b806105e65750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160a01b038216610d6257604051633250574960e11b815260006004820152602401610395565b6000610d70838360006106f0565b90506001600160a01b0381161561041a576040516339e3563760e11b815260006004820152602401610395565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ddc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610e08576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e2657662386f26fc10000830492506010015b6305f5e1008310610e3e576305f5e100830492506008015b6127108310610e5257612710830492506004015b60648310610e64576064830492506002015b600a83106104555760010192915050565b6001600160e01b03198116811461065757600080fd5b600060208284031215610e9d57600080fd5b8135610aba81610e75565b60005b83811015610ec3578181015183820152602001610eab565b50506000910152565b60008151808452610ee4816020860160208601610ea8565b601f01601f19169290920160200192915050565b602081526000610aba6020830184610ecc565b600060208284031215610f1d57600080fd5b5035919050565b80356001600160a01b038116811461045857600080fd5b60008060408385031215610f4e57600080fd5b610f5783610f24565b946020939093013593505050565b600080600060608486031215610f7a57600080fd5b610f8384610f24565b9250610f9160208501610f24565b9150604084013590509250925092565b600060208284031215610fb357600080fd5b610aba82610f24565b60008060408385031215610fcf57600080fd5b610fd883610f24565b915060208301358015158114610fed57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561102457600080fd5b61102d85610f24565b935061103b60208601610f24565b925060408501359150606085013567ffffffffffffffff8082111561105f57600080fd5b818701915087601f83011261107357600080fd5b81358181111561108557611085610ff8565b604051601f8201601f19908116603f011681019083821181831017156110ad576110ad610ff8565b816040528281528a60208487010111156110c657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156110fd57600080fd5b61110683610f24565b915061111460208401610f24565b90509250929050565b600181811c9082168061113157607f821691505b60208210810361115157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161117757634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351611190818460208801610ea8565b8351908301906111a4818360208801610ea8565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111e090830184610ecc565b9695505050505050565b6000602082840312156111fc57600080fd5b8151610aba81610e7556fea26469706673582212207f09667baf809c9be06694690f2282b01868cf01cde553e699b21b9bd20a5db064736f6c63430008140033a2646970667358221220ed9fe20429de1ff95b5b36248ce8820670c9bdaf5e578f7e4390e971a0ba8abb64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80632e42b0cd14620000635780635c1a70e114620000985780637d96da0014620000b1578063a1099bf214620000de578063f6c942301462000104575b600080fd5b6200007a620000743660046200132b565b6200011b565b6040516200008f97969594939291906200142c565b60405180910390f35b620000af620000a93660046200154a565b620006ec565b005b600354620000c5906001600160a01b031681565b6040516001600160a01b0390911681526020016200008f565b620000f5620000ef3660046200132b565b6200092a565b6040516200008f91906200160d565b620000af62000115366004620016a5565b62000b96565b60608060608060608060606000600260008a81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200018757602002820191906000526020600020905b81548152602001906001019080831162000172575b50508351939450839250505067ffffffffffffffff811115620001ae57620001ae620016d2565b604051908082528060200260200182016040528015620001d8578160200160208202803683370190505b5098508067ffffffffffffffff811115620001f757620001f7620016d2565b6040519080825280602002602001820160405280156200022c57816020015b6060815260200190600190039081620002165790505b5097508067ffffffffffffffff8111156200024b576200024b620016d2565b6040519080825280602002602001820160405280156200028057816020015b60608152602001906001900390816200026a5790505b5096508067ffffffffffffffff8111156200029f576200029f620016d2565b604051908082528060200260200182016040528015620002c9578160200160208202803683370190505b5095508067ffffffffffffffff811115620002e857620002e8620016d2565b60405190808252806020026020018201604052801562000312578160200160208202803683370190505b5094508067ffffffffffffffff811115620003315762000331620016d2565b6040519080825280602002602001820160405280156200035b578160200160208202803683370190505b5093508067ffffffffffffffff8111156200037a576200037a620016d2565b604051908082528060200260200182016040528015620003af57816020015b6060815260200190600190039081620003995790505b50925060005b81811015620006de576000838281518110620003d557620003d5620016e8565b6020026020010151905060008060008381526020019081526020016000209050818c84815181106200040b576200040b620016e8565b6020908102919091010152805481906200042590620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200045390620016fe565b8015620004a45780601f106200047857610100808354040283529160200191620004a4565b820191906000526020600020905b8154815290600101906020018083116200048657829003601f168201915b50505050508b8481518110620004be57620004be620016e8565b6020026020010181905250806001018054620004da90620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200050890620016fe565b8015620005595780601f106200052d5761010080835404028352916020019162000559565b820191906000526020600020905b8154815290600101906020018083116200053b57829003601f168201915b50505050508a8481518110620005735762000573620016e8565b60200260200101819052508060020154898481518110620005985762000598620016e8565b6020026020010181815250508060030154888481518110620005be57620005be620016e8565b6020908102919091010152600581015487516001600160a01b0390911690889085908110620005f157620005f1620016e8565b60200260200101906001600160a01b031690816001600160a01b0316815250508060060180546200062290620016fe565b80601f01602080910402602001604051908101604052809291908181526020018280546200065090620016fe565b8015620006a15780601f106200067557610100808354040283529160200191620006a1565b820191906000526020600020905b8154815290600101906020018083116200068357829003601f168201915b5050505050868481518110620006bb57620006bb620016e8565b602002602001018190525050508080620006d59062001750565b915050620003b5565b505050919395979092949650565b60035460405163146a291160e01b8152600481018b90523360248201528a916001600160a01b03169063146a291190604401602060405180830381865afa1580156200073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076291906200176c565b620007c75760405162461bcd60e51b815260206004820152602a60248201527f5072697a65733a2063616c6c6572206973206e6f7420616e2061646d696e206f604482015269662074686973206f726760b01b60648201526084015b60405180910390fd5b6001805460009182620007da8362001750565b9190505590506000620008598b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981528793509150899089908190840183828082843760009201919091525062000fe092505050565b90506200091c828d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c81528f93508e925089918e908e90819084018382808284376000920191909152506200105a92505050565b505050505050505050505050565b620009746040518060e00160405280606081526020016060815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001606081525090565b60008281526020819052604090819020815160e081019092528054829082906200099e90620016fe565b80601f0160208091040260200160405190810160405280929190818152602001828054620009cc90620016fe565b801562000a1d5780601f10620009f15761010080835404028352916020019162000a1d565b820191906000526020600020905b815481529060010190602001808311620009ff57829003601f168201915b5050505050815260200160018201805462000a3890620016fe565b80601f016020809104026020016040519081016040528092919081815260200182805462000a6690620016fe565b801562000ab75780601f1062000a8b5761010080835404028352916020019162000ab7565b820191906000526020600020905b81548152906001019060200180831162000a9957829003601f168201915b505050918352505060028201546020820152600382015460408201526004820154606082015260058201546001600160a01b0316608082015260068201805460a09092019162000b0790620016fe565b80601f016020809104026020016040519081016040528092919081815260200182805462000b3590620016fe565b801562000b865780601f1062000b5a5761010080835404028352916020019162000b86565b820191906000526020600020905b81548152906001019060200180831162000b6857829003601f168201915b5050505050815250509050919050565b6000811162000be85760405162461bcd60e51b815260206004820152601a60248201527f5072697a65733a20616d6f756e74206d757374206265203e20300000000000006044820152606401620007be565b60008281526020819052604090206004810154841462000c4b5760405162461bcd60e51b815260206004820152601f60248201527f5072697a65733a207072697a65206e6f742066726f6d2074686973206f7267006044820152606401620007be565b818160030154101562000ca15760405162461bcd60e51b815260206004820152601860248201527f5072697a65733a206e6f7420656e6f7567682073746f636b00000000000000006044820152606401620007be565b600082826002015462000cb5919062001797565b600354604051631bc7046d60e01b8152600481018890529192506000916001600160a01b0390911690631bc7046d90602401602060405180830381865afa15801562000d05573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2b9190620017b1565b90506001600160a01b03811662000d855760405162461bcd60e51b815260206004820152601d60248201527f5072697a65733a20696e76616c696420746f6b656e20666f72206f72670000006044820152606401620007be565b8383600301600082825462000d9b9190620017dc565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af115801562000df4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e1a91906200176c565b5060035460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529082169063a9059cbb906044016020604051808303816000875af115801562000e6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e9591906200176c565b5060008467ffffffffffffffff81111562000eb45762000eb4620016d2565b60405190808252806020026020018201604052801562000ede578160200160208202803683370190505b50905060005b8581101562000f955760058501546040516335313c2160e11b81523360048201526001600160a01b0390911690636a627842906024016020604051808303816000875af115801562000f3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f609190620017f2565b82828151811062000f755762000f75620016e8565b60209081029190910101528062000f8c8162001750565b91505062000ee4565b5086867fb85716fe4d9704daf275d8a712d517c86b008ec56dafe1f9fb03d7fb52e278838733878660405162000fcf94939291906200180c565b60405180910390a350505050505050565b60008062000fee84620011a3565b60405160200162001000919062001845565b6040516020818303038152906040529050600085828560405162001024906200131d565b620010329392919062001874565b604051809103906000f0801580156200104f573d6000803e3d6000fd5b509695505050505050565b6040805160e081018252878152602080820188905281830187905260608201869052608082018a90526001600160a01b03851660a083015260c0820184905260008b8152908190529190912081518291908190620010b9908262001906565b5060208201516001820190620010d0908262001906565b5060408201516002820155606082015160038201556080820151600482015560a08201516005820180546001600160a01b0319166001600160a01b0390921691909117905560c082015160068201906200112b908262001906565b5050506000888152600260209081526040808320805460018101825590845291909220018a90555188908a907fcee297ce481efd27dd3a430b155c515baca2f4aa3be3eb0338063214f0e3ff599062001190908b908b908b908b908b908b90620019d3565b60405180910390a3505050505050505050565b60606000620011b2836200123d565b600101905060008167ffffffffffffffff811115620011d557620011d5620016d2565b6040519080825280601f01601f19166020018201604052801562001200576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846200120a57509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106200127d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310620012aa576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310620012c957662386f26fc10000830492506010015b6305f5e1008310620012e2576305f5e100830492506008015b6127108310620012f757612710830492506004015b606483106200130a576064830492506002015b600a831062001317576001015b92915050565b6115fa8062001a3d83390190565b6000602082840312156200133e57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015620013775781518752958201959082019060010162001359565b509495945050505050565b60005b838110156200139f57818101518382015260200162001385565b50506000910152565b60008151808452620013c281602086016020860162001382565b601f01601f19169290920160200192915050565b6000815180845260208085019450848260051b860182860160005b858110156200141f5783830389526200140c838351620013a8565b98850198925090840190600101620013f1565b5090979650505050505050565b60e0815260006200144160e083018a62001345565b60208382038185015262001456828b620013d6565b915083820360408501526200146c828a620013d6565b9150838203606085015262001482828962001345565b9150838203608085015262001498828862001345565b84810360a0860152865180825282880193509082019060005b81811015620014d85784516001600160a01b031683529383019391830191600101620014b1565b505084810360c0860152620014ee8187620013d6565b9c9b505050505050505050505050565b60008083601f8401126200151157600080fd5b50813567ffffffffffffffff8111156200152a57600080fd5b6020830191508360208285010111156200154357600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156200156957600080fd5b8935985060208a013567ffffffffffffffff808211156200158957600080fd5b620015978d838e01620014fe565b909a50985060408c0135915080821115620015b157600080fd5b620015bf8d838e01620014fe565b909850965060608c0135955060808c0135945060a08c0135915080821115620015e757600080fd5b50620015f68c828d01620014fe565b915080935050809150509295985092959850929598565b602081526000825160e060208401526200162c610100840182620013a8565b90506020840151601f19808584030160408601526200164c8383620013a8565b92506040860151606086015260608601516080860152608086015160a086015260018060a01b0360a08701511660c086015260c08601519150808584030160e0860152506200169c8282620013a8565b95945050505050565b600080600060608486031215620016bb57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200171357607f821691505b6020821081036200173457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016200176557620017656200173a565b5060010190565b6000602082840312156200177f57600080fd5b815180151581146200179057600080fd5b9392505050565b80820281158282048414176200131757620013176200173a565b600060208284031215620017c457600080fd5b81516001600160a01b03811681146200179057600080fd5b818103818111156200131757620013176200173a565b6000602082840312156200180557600080fd5b5051919050565b84815260018060a01b03841660208201528260408201526080606082015260006200183b608083018462001345565b9695505050505050565b645052495a4560d81b8152600082516200186781600585016020870162001382565b9190910160050192915050565b606081526000620018896060830186620013a8565b82810360208401526200189d8186620013a8565b905082810360408401526200183b8185620013a8565b601f8211156200190157600081815260208120601f850160051c81016020861015620018dc5750805b601f850160051c820191505b81811015620018fd57828155600101620018e8565b5050505b505050565b815167ffffffffffffffff811115620019235762001923620016d2565b6200193b81620019348454620016fe565b84620018b3565b602080601f8311600181146200197357600084156200195a5750858301515b600019600386901b1c1916600185901b178555620018fd565b600085815260208120601f198616915b82811015620019a45788860151825594840194600190910190840162001983565b5085821015620019c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c081526000620019e860c0830189620013a8565b8281036020840152620019fc8189620013a8565b60408401889052606084018790526001600160a01b038616608085015283810360a0850152905062001a2f8185620013a8565b999850505050505050505056fe60806040523480156200001157600080fd5b50604051620015fa380380620015fa8339810160408190526200003491620001c1565b3383836000620000458382620002e1565b506001620000548282620002e1565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009181620000aa565b506009620000a08282620002e1565b50505050620003ad565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012457600080fd5b81516001600160401b0380821115620001415762000141620000fc565b604051601f8301601f19908116603f011681019082821181831017156200016c576200016c620000fc565b816040528381526020925086838588010111156200018957600080fd5b600091505b83821015620001ad57858201830151818301840152908201906200018e565b600093810190920192909252949350505050565b600080600060608486031215620001d757600080fd5b83516001600160401b0380821115620001ef57600080fd5b620001fd8783880162000112565b945060208601519150808211156200021457600080fd5b620002228783880162000112565b935060408601519150808211156200023957600080fd5b50620002488682870162000112565b9150509250925092565b600181811c908216806200026757607f821691505b6020821081036200028857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002dc57600081815260208120601f850160051c81016020861015620002b75750805b601f850160051c820191505b81811015620002d857828155600101620002c3565b5050505b505050565b81516001600160401b03811115620002fd57620002fd620000fc565b62000315816200030e845462000252565b846200028e565b602080601f8311600181146200034d5760008415620003345750858301515b600019600386901b1c1916600185901b178555620002d8565b600085815260208120601f198616915b828110156200037e578886015182559484019460019091019084016200035d565b50858210156200039d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61123d80620003bd6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb4651461021b578063b88d4fde1461022e578063c87b56dd14610241578063e985e9c514610254578063f2fde38b1461026757600080fd5b806370a08231146101e7578063715018a6146101fa5780638da5cb5b1461020257806395d89b411461021357600080fd5b806323b872dd116100de57806323b872dd1461018d57806342842e0e146101a05780636352211e146101b35780636a627842146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e366004610e8b565b61027a565b60405190151581526020015b60405180910390f35b6101406102a5565b60405161012f9190610ef8565b61016061015b366004610f0b565b610337565b6040516001600160a01b03909116815260200161012f565b61018b610186366004610f3b565b610360565b005b61018b61019b366004610f65565b61036f565b61018b6101ae366004610f65565b6103ff565b6101606101c1366004610f0b565b61041f565b6101d96101d4366004610fa1565b61042a565b60405190815260200161012f565b6101d96101f5366004610fa1565b61045d565b61018b6104a5565b6007546001600160a01b0316610160565b6101406104b9565b61018b610229366004610fbc565b6104c8565b61018b61023c36600461100e565b6104d3565b61014061024f366004610f0b565b6104ea565b6101236102623660046110ea565b6105ee565b61018b610275366004610fa1565b61061c565b60006001600160e01b03198216632483248360e11b148061029f575061029f8261065a565b92915050565b6060600080546102b49061111d565b80601f01602080910402602001604051908101604052809291908181526020018280546102e09061111d565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b5050505050905090565b6000610342826106aa565b506000828152600460205260409020546001600160a01b031661029f565b61036b8282336106e3565b5050565b6001600160a01b03821661039e57604051633250574960e11b8152600060048201526024015b60405180910390fd5b60006103ab8383336106f0565b9050836001600160a01b0316816001600160a01b0316146103f9576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610395565b50505050565b61041a838383604051806020016040528060008152506104d3565b505050565b600061029f826106aa565b60006104346107e9565b600880546000918261044583611157565b9190505590506104558382610816565b90505b919050565b60006001600160a01b038216610489576040516322718ad960e21b815260006004820152602401610395565b506001600160a01b031660009081526003602052604090205490565b6104ad6107e9565b6104b76000610830565b565b6060600180546102b49061111d565b61036b338383610882565b6104de84848461036f565b6103f984848484610921565b60606104f5826106aa565b506000828152600660205260408120805461050f9061111d565b80601f016020809104026020016040519081016040528092919081815260200182805461053b9061111d565b80156105885780601f1061055d57610100808354040283529160200191610588565b820191906000526020600020905b81548152906001019060200180831161056b57829003601f168201915b505050505090506000610599610a4a565b905080516000036105ab575092915050565b8151156105dd5780826040516020016105c592919061117e565b60405160208183030381529060405292505050919050565b6105e684610a59565b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6106246107e9565b6001600160a01b03811661064e57604051631e4fbdf760e01b815260006004820152602401610395565b61065781610830565b50565b60006001600160e01b031982166380ac58cd60e01b148061068b57506001600160e01b03198216635b5e139f60e01b145b8061029f57506301ffc9a760e01b6001600160e01b031983161461029f565b6000818152600260205260408120546001600160a01b03168061045557604051637e27328960e01b815260048101849052602401610395565b61041a8383836001610ac1565b6000828152600260205260408120546001600160a01b039081169083161561071d5761071d818486610bc7565b6001600160a01b0381161561075b5761073a600085600080610ac1565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561078a576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6007546001600160a01b031633146104b75760405163118cdaa760e01b8152336004820152602401610395565b61036b828260405180602001604052806000815250610c2b565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166108b457604051630b61174360e31b81526001600160a01b0383166004820152602401610395565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156103f957604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906109639033908890879087906004016111ad565b6020604051808303816000875af192505050801561099e575060408051601f3d908101601f1916820190925261099b918101906111ea565b60015b610a07573d8080156109cc576040519150601f19603f3d011682016040523d82523d6000602084013e6109d1565b606091505b5080516000036109ff57604051633250574960e11b81526001600160a01b0385166004820152602401610395565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610a4357604051633250574960e11b81526001600160a01b0385166004820152602401610395565b5050505050565b6060600980546102b49061111d565b6060610a64826106aa565b506000610a6f610a4a565b90506000815111610a8f5760405180602001604052806000815250610aba565b80610a9984610c42565b604051602001610aaa92919061117e565b6040516020818303038152906040525b9392505050565b8080610ad557506001600160a01b03821615155b15610b97576000610ae5846106aa565b90506001600160a01b03831615801590610b115750826001600160a01b0316816001600160a01b031614155b8015610b245750610b2281846105ee565b155b15610b4d5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610395565b8115610b955783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610bd2838383610cd5565b61041a576001600160a01b038316610c0057604051637e27328960e01b815260048101829052602401610395565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610395565b610c358383610d38565b61041a6000848484610921565b60606000610c4f83610d9d565b600101905060008167ffffffffffffffff811115610c6f57610c6f610ff8565b6040519080825280601f01601f191660200182016040528015610c99576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ca357509392505050565b60006001600160a01b038316158015906105e65750826001600160a01b0316846001600160a01b03161480610d0f5750610d0f84846105ee565b806105e65750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160a01b038216610d6257604051633250574960e11b815260006004820152602401610395565b6000610d70838360006106f0565b90506001600160a01b0381161561041a576040516339e3563760e11b815260006004820152602401610395565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ddc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610e08576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e2657662386f26fc10000830492506010015b6305f5e1008310610e3e576305f5e100830492506008015b6127108310610e5257612710830492506004015b60648310610e64576064830492506002015b600a83106104555760010192915050565b6001600160e01b03198116811461065757600080fd5b600060208284031215610e9d57600080fd5b8135610aba81610e75565b60005b83811015610ec3578181015183820152602001610eab565b50506000910152565b60008151808452610ee4816020860160208601610ea8565b601f01601f19169290920160200192915050565b602081526000610aba6020830184610ecc565b600060208284031215610f1d57600080fd5b5035919050565b80356001600160a01b038116811461045857600080fd5b60008060408385031215610f4e57600080fd5b610f5783610f24565b946020939093013593505050565b600080600060608486031215610f7a57600080fd5b610f8384610f24565b9250610f9160208501610f24565b9150604084013590509250925092565b600060208284031215610fb357600080fd5b610aba82610f24565b60008060408385031215610fcf57600080fd5b610fd883610f24565b915060208301358015158114610fed57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561102457600080fd5b61102d85610f24565b935061103b60208601610f24565b925060408501359150606085013567ffffffffffffffff8082111561105f57600080fd5b818701915087601f83011261107357600080fd5b81358181111561108557611085610ff8565b604051601f8201601f19908116603f011681019083821181831017156110ad576110ad610ff8565b816040528281528a60208487010111156110c657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156110fd57600080fd5b61110683610f24565b915061111460208401610f24565b90509250929050565b600181811c9082168061113157607f821691505b60208210810361115157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161117757634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351611190818460208801610ea8565b8351908301906111a4818360208801610ea8565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111e090830184610ecc565b9695505050505050565b6000602082840312156111fc57600080fd5b8151610aba81610e7556fea26469706673582212207f09667baf809c9be06694690f2282b01868cf01cde553e699b21b9bd20a5db064736f6c63430008140033a2646970667358221220ed9fe20429de1ff95b5b36248ce8820670c9bdaf5e578f7e4390e971a0ba8abb64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimPrize(uint256,uint256,uint256)": {
        "details": "El usuario debe haber aprobado previamente a este contrato (`Prizes`)      para gastar `amount * price` tokens de la organización.      Los tokens pagados son transferidos a la tesorería de la organización (OrganizationManager).",
        "params": {
          "amount": "Cantidad de unidades que se reclaman",
          "orgId": "ID de la organización",
          "prizeId": "ID del premio"
        }
      },
      "createPrize(uint256,string,string,uint256,uint256,string)": {
        "params": {
          "baseURI": "Image cid in Filebase",
          "description": "Descripción del premio",
          "name": "Nombre del premio",
          "orgId": "ID de la organización",
          "price": "Precio (en tokens de la organización) para reclamar 1 unidad",
          "stock": "Cantidad inicial de unidades disponibles de este premio"
        }
      },
      "listPrizes(uint256)": {
        "details": "Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar     sin problema mientras las strings sean memoria.     También retornamos el `prizeId` como índice para que el front lo identifique.",
        "params": {
          "orgId": "ID de la organización"
        },
        "returns": {
          "baseURI": "Lista de cids de imágenes de premios",
          "descriptions": "Lista de descripciones",
          "ids": "Lista de IDs (índices) de cada premio",
          "names": "Lista de nombres",
          "nftContracts": "Lista de direcciones de contratos NFT",
          "prices": "Lista de precios",
          "stocks": "Lista de stocks"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimPrize(uint256,uint256,uint256)": {
        "notice": "Reclama `amount` unidades de un premio (paga en tokens de la org)."
      },
      "createPrize(uint256,string,string,uint256,uint256,string)": {
        "notice": "Crea un nuevo premio para la organización `orgId`."
      },
      "listPrizes(uint256)": {
        "notice": "Lista todos los premios de una organización, incluyendo su ID e información."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14783,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "prizes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Prize)14778_storage)"
      },
      {
        "astId": 14785,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "nextPrizeId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14790,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "prizeIdsByOrg",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 14793,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "orgManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOrganizationManager)13437"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IOrganizationManager)13437": {
        "encoding": "inplace",
        "label": "contract IOrganizationManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Prize)14778_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Prizes.Prize)",
        "numberOfBytes": "32",
        "value": "t_struct(Prize)14778_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Prize)14778_storage": {
        "encoding": "inplace",
        "label": "struct Prizes.Prize",
        "members": [
          {
            "astId": 14765,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 14767,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 14769,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14771,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "stock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14773,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "orgId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14775,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "nftContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 14777,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "baseURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}