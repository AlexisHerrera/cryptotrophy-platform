{
  "address": "0x4D172493c7FD8Be25D0CcBd6662ECfE88756c332",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOrganizationManager",
          "name": "_orgManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "PrizeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        }
      ],
      "name": "PrizeCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stock",
          "type": "uint256"
        }
      ],
      "name": "createPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prizeId",
          "type": "uint256"
        }
      ],
      "name": "getPrize",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orgId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Prizes.Prize",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        }
      ],
      "name": "listPrizes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "descriptions",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stocks",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orgManager",
      "outputs": [
        {
          "internalType": "contract IOrganizationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe519edb2a495ff73f38d7675468e7fa687538c14e5eba4a1c063239d2973bcc9",
  "receipt": {
    "to": null,
    "from": "0x6875548D549dB2D6D99B29E0BA6ea7f7C53739D1",
    "contractAddress": "0x4D172493c7FD8Be25D0CcBd6662ECfE88756c332",
    "transactionIndex": 48,
    "gasUsed": "1003503",
    "logsBloom": "0x
    "blockHash": "0x7b7ae0e80d260855ab3db83d7109bcd614a797f00df56061702122413e25f2cf",
    "transactionHash": "0xe519edb2a495ff73f38d7675468e7fa687538c14e5eba4a1c063239d2973bcc9",
    "logs": [],
    "blockNumber": 24889579,
    "cumulativeGasUsed": "14356913",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd6DFF585b2C99605dCc787F8974e8a674AFfE768"
  ],
  "numDeployments": 3,
  "solcInputHash": "6a7a04fc73320e906a291255894636d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOrganizationManager\",\"name\":\"_orgManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"name\":\"PrizeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"name\":\"createPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prizeId\",\"type\":\"uint256\"}],\"name\":\"getPrize\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"}],\"internalType\":\"struct Prizes.Prize\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"}],\"name\":\"listPrizes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stocks\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orgManager\",\"outputs\":[{\"internalType\":\"contract IOrganizationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimPrize(uint256,uint256,uint256)\":{\"details\":\"El usuario debe haber aprobado previamente a este contrato (`Prizes`)      para gastar `amount * price` tokens de la organizaci\\u00f3n.\",\"params\":{\"amount\":\"Cantidad de unidades que se reclaman\",\"orgId\":\"ID de la organizaci\\u00f3n\",\"prizeId\":\"\\u00cdndice del premio (retornado por listPrizes)\"}},\"createPrize(uint256,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Descripci\\u00f3n del premio\",\"name\":\"Nombre del premio\",\"orgId\":\"ID de la organizaci\\u00f3n\",\"price\":\"Precio (en tokens de la organizaci\\u00f3n) para reclamar 1 unidad\",\"stock\":\"Cantidad inicial de unidades disponibles de este premio\"}},\"listPrizes(uint256)\":{\"details\":\"Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar     sin problema mientras las strings sean memoria.     Tambi\\u00e9n retornamos el `prizeId` como \\u00edndice para que el front lo identifique.\",\"params\":{\"orgId\":\"ID de la organizaci\\u00f3n\"},\"returns\":{\"descriptions\":\"Lista de descripciones\",\"ids\":\"Lista de IDs (\\u00edndices) de cada premio\",\"names\":\"Lista de nombres\",\"prices\":\"Lista de precios\",\"stocks\":\"Lista de stocks\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimPrize(uint256,uint256,uint256)\":{\"notice\":\"Reclama `amount` unidades de un premio (paga en tokens de la org).\"},\"createPrize(uint256,string,string,uint256,uint256)\":{\"notice\":\"Crea un nuevo premio para la organizaci\\u00f3n `orgId`.\"},\"listPrizes(uint256)\":{\"notice\":\"Lista todos los premios de una organizaci\\u00f3n, incluyendo su ID e informaci\\u00f3n.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Prizes/Prizes.sol\":\"Prizes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Organization/IOrganizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IOrganizationManager {\\n    function isAdmin(uint256 _orgId, address _user) external view returns (bool);\\n    function getTokenOfOrg(uint256 _orgId) external view returns (address);\\n    function getBalanceOfOrg(uint256 _orgId) external view returns (uint256);\\n    function getBalanceOfUser(uint256 _orgId, address _user) external view returns (uint256, string memory);\\n    function transferTokensTo(uint256 _orgId, address _destAddress, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2514073f2f068db9c1357ca7d6a82c3f9fda63fc8f244940453a5388f881c3ff\",\"license\":\"MIT\"},\"contracts/Prizes/Prizes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../Organization/IOrganizationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Prizes {\\n    // -------------------------------------------------------------------------\\n    // ESTRUCTURAS Y ALMACENAMIENTO\\n    // -------------------------------------------------------------------------\\n\\n    struct Prize {\\n        // Como se pide: name, description, price, stock\\n        string name;\\n        string description;\\n        uint256 price;\\n        uint256 stock;\\n        uint256 orgId;\\n    }\\n\\n    mapping(uint256 => Prize) private prizes; // prizeId => Prize\\n    uint256 private nextPrizeId;\\n\\n    // prizesByOrg[orgId] => array din\\u00e1mico de premios de esa organizaci\\u00f3n\\n    mapping(uint256 => Prize[]) private prizesByOrg;\\n\\n    // Referencia al OrganizationManager para verificar admins y miembros,\\n    // y para obtener el token de la org.\\n    IOrganizationManager public orgManager;\\n\\n    // EVents\\n    event PrizeCreated(\\n        uint256 indexed prizeId,\\n        uint256 indexed orgId,\\n        string name,\\n        string description,\\n        uint256 price,\\n        uint256 stock\\n    );\\n\\n    event PrizeClaimed(\\n        uint256 indexed prizeId,\\n        uint256 indexed orgId,\\n        uint256 amount,\\n\\t\\taddress claimer,\\n        uint256 cost\\n    );\\n\\n    // -------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    // -------------------------------------------------------------------------\\n\\n    constructor(IOrganizationManager _orgManager) {\\n        orgManager = _orgManager;\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // MODIFICADORES\\n    // -------------------------------------------------------------------------\\n\\n    /// @dev Verifica si msg.sender es admin en la org correspondiente\\n    modifier onlyOrgAdmin(uint256 orgId) {\\n        require(\\n            orgManager.isAdmin(orgId, msg.sender),\\n            \\\"Prizes: caller is not an admin of this org\\\"\\n        );\\n        _;\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    // FUNCIONES PRINCIPALES\\n    // -------------------------------------------------------------------------\\n\\n    /// @notice Crea un nuevo premio para la organizaci\\u00f3n `orgId`.\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @param name Nombre del premio\\n    /// @param description Descripci\\u00f3n del premio\\n    /// @param price Precio (en tokens de la organizaci\\u00f3n) para reclamar 1 unidad\\n    /// @param stock Cantidad inicial de unidades disponibles de este premio\\n    function createPrize(\\n        uint256 orgId,\\n        string calldata name,\\n        string calldata description,\\n        uint256 price,\\n        uint256 stock\\n    )\\n    external\\n    onlyOrgAdmin(orgId)\\n    {\\n        Prize memory _prize = Prize({\\n            name: name,\\n            description: description,\\n            price: price,\\n            stock: stock,\\n            orgId: orgId\\n        });\\n        uint256 _prizeId = nextPrizeId++;\\n\\t\\tprizes[_prizeId] = _prize;\\n\\n        // Almacenar el nuevo premio\\n        prizesByOrg[orgId].push(_prize);\\n\\n        emit PrizeCreated(\\n            _prizeId,\\n            orgId,\\n            name,\\n            description,\\n            price,\\n            stock\\n        );\\n    }\\n\\n\\tfunction getPrize(uint256 prizeId) external view returns (Prize memory) {\\n\\t\\treturn prizes[prizeId];\\n\\t}\\n\\n    /// @notice Lista todos los premios de una organizaci\\u00f3n, incluyendo su ID e informaci\\u00f3n.\\n    /// @dev Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar\\n    ///     sin problema mientras las strings sean memoria.\\n    ///     Tambi\\u00e9n retornamos el `prizeId` como \\u00edndice para que el front lo identifique.\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @return ids Lista de IDs (\\u00edndices) de cada premio\\n    /// @return names Lista de nombres\\n    /// @return descriptions Lista de descripciones\\n    /// @return prices Lista de precios\\n    /// @return stocks Lista de stocks\\n    function listPrizes(uint256 orgId)\\n    external\\n    view\\n    returns (\\n        uint256[] memory ids,\\n        string[] memory names,\\n        string[] memory descriptions,\\n        uint256[] memory prices,\\n        uint256[] memory stocks\\n    )\\n    {\\n        Prize[] storage _prizes = prizesByOrg[orgId];\\n        uint256 length = _prizes.length;\\n\\n        ids = new uint256[](length);\\n        names = new string[](length);\\n        descriptions = new string[](length);\\n        prices = new uint256[](length);\\n        stocks = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            Prize storage p = _prizes[i];\\n            ids[i] = i;  // El ID es simplemente el \\u00edndice en el array\\n            names[i] = p.name;\\n            descriptions[i] = p.description;\\n            prices[i] = p.price;\\n            stocks[i] = p.stock;\\n        }\\n    }\\n\\n    /// @notice Reclama `amount` unidades de un premio (paga en tokens de la org).\\n    /// @dev El usuario debe haber aprobado previamente a este contrato (`Prizes`)\\n    ///      para gastar `amount * price` tokens de la organizaci\\u00f3n.\\n    /// @param orgId ID de la organizaci\\u00f3n\\n    /// @param prizeId \\u00cdndice del premio (retornado por listPrizes)\\n    /// @param amount Cantidad de unidades que se reclaman\\n    function claimPrize(uint256 orgId, uint256 prizeId, uint256 amount)\\n    external\\n    {\\n        require(amount > 0, \\\"Prizes: amount must be > 0\\\");\\n\\n        Prize storage p = prizesByOrg[orgId][prizeId];\\n        require(p.stock >= amount, \\\"Prizes: not enough stock\\\");\\n\\n        // Costo total en tokens\\n        uint256 cost = p.price * amount;\\n\\n        // Obtener la direcci\\u00f3n del token de la organizaci\\u00f3n\\n        address tokenAddress = orgManager.getTokenOfOrg(orgId);\\n        require(tokenAddress != address(0), \\\"Prizes: invalid token for org\\\");\\n\\n        // Transferir tokens desde el usuario a este contrato (requiere approve)\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), cost);\\n\\n        // Disminuir el stock\\n        p.stock -= amount;\\n\\n\\t\\temit PrizeClaimed(prizeId, orgId, amount, msg.sender, cost);\\n\\n        // Opcionalmente: \\\"quemar\\\" tokens o lo que se desee hacer con esos tokens\\n        // Si se pueden quemar:\\n        // CompanyToken(tokenAddress).burn(cost);\\n        // O transferir a una direcci\\u00f3n sin clave:\\n        // IERC20(tokenAddress).transfer(address(0xdead), cost);\\n    }\\n}\\n\",\"keccak256\":\"0x8036fe07eb1d4682ff3a7463075134b0ef5c3fcb9ae7a2c12d29f15b8393f8ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161115238038061115283398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6110bf806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e42b0cd1461005c5780637d96da001461008957806394119830146100b4578063a1099bf2146100c9578063f6c94230146100e9575b600080fd5b61006f61006a366004610b3f565b6100fc565b604051610080959493929190610c2e565b60405180910390f35b60035461009c906001600160a01b031681565b6040516001600160a01b039091168152602001610080565b6100c76100c2366004610ce4565b610488565b005b6100dc6100d7366004610b3f565b61071e565b6040516100809190610d6d565b6100c76100f7366004610dd1565b6108b1565b600081815260026020526040902080546060918291829182918291908067ffffffffffffffff81111561013157610131610dfd565b60405190808252806020026020018201604052801561015a578160200160208202803683370190505b5096508067ffffffffffffffff81111561017657610176610dfd565b6040519080825280602002602001820160405280156101a957816020015b60608152602001906001900390816101945790505b5095508067ffffffffffffffff8111156101c5576101c5610dfd565b6040519080825280602002602001820160405280156101f857816020015b60608152602001906001900390816101e35790505b5094508067ffffffffffffffff81111561021457610214610dfd565b60405190808252806020026020018201604052801561023d578160200160208202803683370190505b5093508067ffffffffffffffff81111561025957610259610dfd565b604051908082528060200260200182016040528015610282578160200160208202803683370190505b50925060005b8181101561047c5760008382815481106102a4576102a4610e13565b90600052602060002090600502019050818983815181106102c7576102c7610e13565b6020908102919091010152805481906102df90610e29565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90610e29565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b505050505088838151811061036f5761036f610e13565b602002602001018190525080600101805461038990610e29565b80601f01602080910402602001604051908101604052809291908181526020018280546103b590610e29565b80156104025780601f106103d757610100808354040283529160200191610402565b820191906000526020600020905b8154815290600101906020018083116103e557829003601f168201915b505050505087838151811061041957610419610e13565b6020026020010181905250806002015486838151811061043b5761043b610e13565b602002602001018181525050806003015485838151811061045e5761045e610e13565b6020908102919091010152508061047481610e79565b915050610288565b50505091939590929450565b60035460405163146a291160e01b81526004810189905233602482015288916001600160a01b03169063146a291190604401602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb9190610e92565b61055f5760405162461bcd60e51b815260206004820152602a60248201527f5072697a65733a2063616c6c6572206973206e6f7420616e2061646d696e206f604482015269662074686973206f726760b01b60648201526084015b60405180910390fd5b6040805160c06020601f8a01819004028201810190925260a081018881526000928291908b908b9081908501838280828437600092019190915250505090825250604080516020601f8a01819004810282018101909252888152918101919089908990819084018382808284376000920182905250938552505050602082018790526040820186905260609091018b9052600180549293509091908261060483610e79565b9091555060008181526020819052604090208351919250839181906106299082610f0a565b506020820151600182019061063e9082610f0a565b506040828101516002808401919091556060840151600384015560809093015160049092019190915560008c815260209283529081208054600181018255908252919020835184926005029091019081906106999082610f0a565b50602082015160018201906106ae9082610f0a565b50604082015181600201556060820151816003015560808201518160040155505089817f6f76cd78066c83dcd89c1714300a3e301606d30d18ed1bdc8786fcea1fa148e68b8b8b8b8b8b60405161070a96959493929190610ff3565b60405180910390a350505050505050505050565b6107506040518060a0016040528060608152602001606081526020016000815260200160008152602001600081525090565b60008281526020819052604090819020815160a0810190925280548290829061077890610e29565b80601f01602080910402602001604051908101604052809291908181526020018280546107a490610e29565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b5050505050815260200160018201805461080a90610e29565b80601f016020809104026020016040519081016040528092919081815260200182805461083690610e29565b80156108835780601f1061085857610100808354040283529160200191610883565b820191906000526020600020905b81548152906001019060200180831161086657829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815250509050919050565b600081116109015760405162461bcd60e51b815260206004820152601a60248201527f5072697a65733a20616d6f756e74206d757374206265203e20300000000000006044820152606401610556565b600083815260026020526040812080548490811061092157610921610e13565b9060005260206000209060050201905081816003015410156109855760405162461bcd60e51b815260206004820152601860248201527f5072697a65733a206e6f7420656e6f7567682073746f636b00000000000000006044820152606401610556565b60008282600201546109979190611030565b600354604051631bc7046d60e01b8152600481018890529192506000916001600160a01b0390911690631bc7046d90602401602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a919061104d565b90506001600160a01b038116610a625760405162461bcd60e51b815260206004820152601d60248201527f5072697a65733a20696e76616c696420746f6b656e20666f72206f72670000006044820152606401610556565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190610e92565b5083836003016000828254610aee9190611076565b909155505060408051858152336020820152908101839052869086907f1737666c6e09104ba672ddb2ad4aa612e2e5f8b86010d08eb88803cddc62ae229060600160405180910390a3505050505050565b600060208284031215610b5157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015610b8857815187529582019590820190600101610b6c565b509495945050505050565b6000815180845260005b81811015610bb957602081850181015186830182015201610b9d565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610c21578284038952610c0f848351610b93565b98850198935090840190600101610bf7565b5091979650505050505050565b60a081526000610c4160a0830188610b58565b8281036020840152610c538188610bd9565b90508281036040840152610c678187610bd9565b90508281036060840152610c7b8186610b58565b90508281036080840152610c8f8185610b58565b98975050505050505050565b60008083601f840112610cad57600080fd5b50813567ffffffffffffffff811115610cc557600080fd5b602083019150836020828501011115610cdd57600080fd5b9250929050565b600080600080600080600060a0888a031215610cff57600080fd5b87359650602088013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8b838c01610c9b565b909850965060408a0135915080821115610d4357600080fd5b50610d508a828b01610c9b565b989b979a5095989597966060870135966080013595509350505050565b602081526000825160a06020840152610d8960c0840182610b93565b90506020840151601f19848303016040850152610da68282610b93565b9150506040840151606084015260608401516080840152608084015160a08401528091505092915050565b600080600060608486031215610de657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610e3d57607f821691505b602082108103610e5d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610e8b57610e8b610e63565b5060010190565b600060208284031215610ea457600080fd5b81518015158114610eb457600080fd5b9392505050565b601f821115610f0557600081815260208120601f850160051c81016020861015610ee25750805b601f850160051c820191505b81811015610f0157828155600101610eee565b5050505b505050565b815167ffffffffffffffff811115610f2457610f24610dfd565b610f3881610f328454610e29565b84610ebb565b602080601f831160018114610f6d5760008415610f555750858301515b600019600386901b1c1916600185901b178555610f01565b600085815260208120601f198616915b82811015610f9c57888601518255948401946001909101908401610f7d565b5085821015610fba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60808152600061100760808301888a610fca565b828103602084015261101a818789610fca565b6040840195909552505060600152949350505050565b808202811582820484141761104757611047610e63565b92915050565b60006020828403121561105f57600080fd5b81516001600160a01b0381168114610eb457600080fd5b8181038181111561104757611047610e6356fea26469706673582212202f683877fc066466741b2a2e3528e9a2ade1e8221fea90bac5d1d7dcbf5f3ca764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80632e42b0cd1461005c5780637d96da001461008957806394119830146100b4578063a1099bf2146100c9578063f6c94230146100e9575b600080fd5b61006f61006a366004610b3f565b6100fc565b604051610080959493929190610c2e565b60405180910390f35b60035461009c906001600160a01b031681565b6040516001600160a01b039091168152602001610080565b6100c76100c2366004610ce4565b610488565b005b6100dc6100d7366004610b3f565b61071e565b6040516100809190610d6d565b6100c76100f7366004610dd1565b6108b1565b600081815260026020526040902080546060918291829182918291908067ffffffffffffffff81111561013157610131610dfd565b60405190808252806020026020018201604052801561015a578160200160208202803683370190505b5096508067ffffffffffffffff81111561017657610176610dfd565b6040519080825280602002602001820160405280156101a957816020015b60608152602001906001900390816101945790505b5095508067ffffffffffffffff8111156101c5576101c5610dfd565b6040519080825280602002602001820160405280156101f857816020015b60608152602001906001900390816101e35790505b5094508067ffffffffffffffff81111561021457610214610dfd565b60405190808252806020026020018201604052801561023d578160200160208202803683370190505b5093508067ffffffffffffffff81111561025957610259610dfd565b604051908082528060200260200182016040528015610282578160200160208202803683370190505b50925060005b8181101561047c5760008382815481106102a4576102a4610e13565b90600052602060002090600502019050818983815181106102c7576102c7610e13565b6020908102919091010152805481906102df90610e29565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90610e29565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b505050505088838151811061036f5761036f610e13565b602002602001018190525080600101805461038990610e29565b80601f01602080910402602001604051908101604052809291908181526020018280546103b590610e29565b80156104025780601f106103d757610100808354040283529160200191610402565b820191906000526020600020905b8154815290600101906020018083116103e557829003601f168201915b505050505087838151811061041957610419610e13565b6020026020010181905250806002015486838151811061043b5761043b610e13565b602002602001018181525050806003015485838151811061045e5761045e610e13565b6020908102919091010152508061047481610e79565b915050610288565b50505091939590929450565b60035460405163146a291160e01b81526004810189905233602482015288916001600160a01b03169063146a291190604401602060405180830381865afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb9190610e92565b61055f5760405162461bcd60e51b815260206004820152602a60248201527f5072697a65733a2063616c6c6572206973206e6f7420616e2061646d696e206f604482015269662074686973206f726760b01b60648201526084015b60405180910390fd5b6040805160c06020601f8a01819004028201810190925260a081018881526000928291908b908b9081908501838280828437600092019190915250505090825250604080516020601f8a01819004810282018101909252888152918101919089908990819084018382808284376000920182905250938552505050602082018790526040820186905260609091018b9052600180549293509091908261060483610e79565b9091555060008181526020819052604090208351919250839181906106299082610f0a565b506020820151600182019061063e9082610f0a565b506040828101516002808401919091556060840151600384015560809093015160049092019190915560008c815260209283529081208054600181018255908252919020835184926005029091019081906106999082610f0a565b50602082015160018201906106ae9082610f0a565b50604082015181600201556060820151816003015560808201518160040155505089817f6f76cd78066c83dcd89c1714300a3e301606d30d18ed1bdc8786fcea1fa148e68b8b8b8b8b8b60405161070a96959493929190610ff3565b60405180910390a350505050505050505050565b6107506040518060a0016040528060608152602001606081526020016000815260200160008152602001600081525090565b60008281526020819052604090819020815160a0810190925280548290829061077890610e29565b80601f01602080910402602001604051908101604052809291908181526020018280546107a490610e29565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b5050505050815260200160018201805461080a90610e29565b80601f016020809104026020016040519081016040528092919081815260200182805461083690610e29565b80156108835780601f1061085857610100808354040283529160200191610883565b820191906000526020600020905b81548152906001019060200180831161086657829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815250509050919050565b600081116109015760405162461bcd60e51b815260206004820152601a60248201527f5072697a65733a20616d6f756e74206d757374206265203e20300000000000006044820152606401610556565b600083815260026020526040812080548490811061092157610921610e13565b9060005260206000209060050201905081816003015410156109855760405162461bcd60e51b815260206004820152601860248201527f5072697a65733a206e6f7420656e6f7567682073746f636b00000000000000006044820152606401610556565b60008282600201546109979190611030565b600354604051631bc7046d60e01b8152600481018890529192506000916001600160a01b0390911690631bc7046d90602401602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a919061104d565b90506001600160a01b038116610a625760405162461bcd60e51b815260206004820152601d60248201527f5072697a65733a20696e76616c696420746f6b656e20666f72206f72670000006044820152606401610556565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190610e92565b5083836003016000828254610aee9190611076565b909155505060408051858152336020820152908101839052869086907f1737666c6e09104ba672ddb2ad4aa612e2e5f8b86010d08eb88803cddc62ae229060600160405180910390a3505050505050565b600060208284031215610b5157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015610b8857815187529582019590820190600101610b6c565b509495945050505050565b6000815180845260005b81811015610bb957602081850181015186830182015201610b9d565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610c21578284038952610c0f848351610b93565b98850198935090840190600101610bf7565b5091979650505050505050565b60a081526000610c4160a0830188610b58565b8281036020840152610c538188610bd9565b90508281036040840152610c678187610bd9565b90508281036060840152610c7b8186610b58565b90508281036080840152610c8f8185610b58565b98975050505050505050565b60008083601f840112610cad57600080fd5b50813567ffffffffffffffff811115610cc557600080fd5b602083019150836020828501011115610cdd57600080fd5b9250929050565b600080600080600080600060a0888a031215610cff57600080fd5b87359650602088013567ffffffffffffffff80821115610d1e57600080fd5b610d2a8b838c01610c9b565b909850965060408a0135915080821115610d4357600080fd5b50610d508a828b01610c9b565b989b979a5095989597966060870135966080013595509350505050565b602081526000825160a06020840152610d8960c0840182610b93565b90506020840151601f19848303016040850152610da68282610b93565b9150506040840151606084015260608401516080840152608084015160a08401528091505092915050565b600080600060608486031215610de657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610e3d57607f821691505b602082108103610e5d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610e8b57610e8b610e63565b5060010190565b600060208284031215610ea457600080fd5b81518015158114610eb457600080fd5b9392505050565b601f821115610f0557600081815260208120601f850160051c81016020861015610ee25750805b601f850160051c820191505b81811015610f0157828155600101610eee565b5050505b505050565b815167ffffffffffffffff811115610f2457610f24610dfd565b610f3881610f328454610e29565b84610ebb565b602080601f831160018114610f6d5760008415610f555750858301515b600019600386901b1c1916600185901b178555610f01565b600085815260208120601f198616915b82811015610f9c57888601518255948401946001909101908401610f7d565b5085821015610fba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60808152600061100760808301888a610fca565b828103602084015261101a818789610fca565b6040840195909552505060600152949350505050565b808202811582820484141761104757611047610e63565b92915050565b60006020828403121561105f57600080fd5b81516001600160a01b0381168114610eb457600080fd5b8181038181111561104757611047610e6356fea26469706673582212202f683877fc066466741b2a2e3528e9a2ade1e8221fea90bac5d1d7dcbf5f3ca764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimPrize(uint256,uint256,uint256)": {
        "details": "El usuario debe haber aprobado previamente a este contrato (`Prizes`)      para gastar `amount * price` tokens de la organización.",
        "params": {
          "amount": "Cantidad de unidades que se reclaman",
          "orgId": "ID de la organización",
          "prizeId": "Índice del premio (retornado por listPrizes)"
        }
      },
      "createPrize(uint256,string,string,uint256,uint256)": {
        "params": {
          "description": "Descripción del premio",
          "name": "Nombre del premio",
          "orgId": "ID de la organización",
          "price": "Precio (en tokens de la organización) para reclamar 1 unidad",
          "stock": "Cantidad inicial de unidades disponibles de este premio"
        }
      },
      "listPrizes(uint256)": {
        "details": "Retorna un array de structs `Prize` pero en Solidity 0.8.x se puede usar     sin problema mientras las strings sean memoria.     También retornamos el `prizeId` como índice para que el front lo identifique.",
        "params": {
          "orgId": "ID de la organización"
        },
        "returns": {
          "descriptions": "Lista de descripciones",
          "ids": "Lista de IDs (índices) de cada premio",
          "names": "Lista de nombres",
          "prices": "Lista de precios",
          "stocks": "Lista de stocks"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimPrize(uint256,uint256,uint256)": {
        "notice": "Reclama `amount` unidades de un premio (paga en tokens de la org)."
      },
      "createPrize(uint256,string,string,uint256,uint256)": {
        "notice": "Crea un nuevo premio para la organización `orgId`."
      },
      "listPrizes(uint256)": {
        "notice": "Lista todos los premios de una organización, incluyendo su ID e información."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9459,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "prizes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Prize)9454_storage)"
      },
      {
        "astId": 9461,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "nextPrizeId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9467,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "prizesByOrg",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_struct(Prize)9454_storage)dyn_storage)"
      },
      {
        "astId": 9470,
        "contract": "contracts/Prizes/Prizes.sol:Prizes",
        "label": "orgManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOrganizationManager)8338"
      }
    ],
    "types": {
      "t_array(t_struct(Prize)9454_storage)dyn_storage": {
        "base": "t_struct(Prize)9454_storage",
        "encoding": "dynamic_array",
        "label": "struct Prizes.Prize[]",
        "numberOfBytes": "32"
      },
      "t_contract(IOrganizationManager)8338": {
        "encoding": "inplace",
        "label": "contract IOrganizationManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_struct(Prize)9454_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Prizes.Prize[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Prize)9454_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Prize)9454_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Prizes.Prize)",
        "numberOfBytes": "32",
        "value": "t_struct(Prize)9454_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Prize)9454_storage": {
        "encoding": "inplace",
        "label": "struct Prizes.Prize",
        "members": [
          {
            "astId": 9445,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9447,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9449,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9451,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "stock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9453,
            "contract": "contracts/Prizes/Prizes.sol:Prizes",
            "label": "orgId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}