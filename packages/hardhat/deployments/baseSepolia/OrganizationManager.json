{
  "address": "0x3E02c8f6066e0A046EE9772ffd6E359dAD0745fB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "OrganizationCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialEthBacking",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "createOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        }
      ],
      "name": "getBalanceOfOrg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalanceOfUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        }
      ],
      "name": "getOrganizationDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orgId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "userIsAdmin",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "userIsMember",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        }
      ],
      "name": "getTokenOfOrg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        }
      ],
      "name": "joinOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        }
      ],
      "name": "leaveOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listOrganizations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listOrganizationsWithDetails",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "orgIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenSymbols",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "adminCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "userCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "isMembers",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orgCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "organizationIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "organizations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_destAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokensTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89a9a1a5c85d6fe5d3be967141cf70731ad71dac3266dd38970a58c5a196209d",
  "receipt": {
    "to": null,
    "from": "0x6875548D549dB2D6D99B29E0BA6ea7f7C53739D1",
    "contractAddress": "0x3E02c8f6066e0A046EE9772ffd6E359dAD0745fB",
    "transactionIndex": 24,
    "gasUsed": "3095246",
    "logsBloom": "0x
    "blockHash": "0x63e423e1fb96254c45f987adfa0bd6889e12d35efd0f2d40657d294c8b579ddf",
    "transactionHash": "0x89a9a1a5c85d6fe5d3be967141cf70731ad71dac3266dd38970a58c5a196209d",
    "logs": [],
    "blockNumber": 23789582,
    "cumulativeGasUsed": "7106099",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c923584b09c25d8082f9fac83f4c8db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"OrganizationCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialEthBacking\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"createOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"}],\"name\":\"getBalanceOfOrg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalanceOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"}],\"name\":\"getOrganizationDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orgId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"userIsAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"userIsMember\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"}],\"name\":\"getTokenOfOrg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"}],\"name\":\"joinOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"}],\"name\":\"leaveOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOrganizations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOrganizationsWithDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orgIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"adminCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isMembers\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orgCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"organizationIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"organizations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(uint256,address)\":{\"notice\":\"Agrega un administrador a una organizaci\\u00f3n\"},\"addUser(uint256,address)\":{\"notice\":\"Agrega un usuario a una organizaci\\u00f3n\"},\"createOrganization(string,string,uint256,uint256,address[],address[])\":{\"notice\":\"Crea una nueva organizaci\\u00f3n\"},\"getBalanceOfOrg(uint256)\":{\"notice\":\"Obtiene el balance de una organizaci\\u00f3n en su token con los 18 decimales\"},\"getOrganizationDetails(uint256)\":{\"notice\":\"Obtiene los detalles de una organizaci\\u00f3n por ID\"},\"isAdmin(uint256,address)\":{\"notice\":\"Verifica si una direcci\\u00f3n es administrador de una organizaci\\u00f3n\"},\"isMember(uint256,address)\":{\"notice\":\"Verifica si una direcci\\u00f3n es miembro de una organizaci\\u00f3n\"},\"isUser(uint256,address)\":{\"notice\":\"Verifica si una direcci\\u00f3n es miembro de una organizaci\\u00f3n\"},\"joinOrganization(uint256)\":{\"notice\":\"Unirse a una organizaci\\u00f3n\"},\"leaveOrganization(uint256)\":{\"notice\":\"Salir de una organizaci\\u00f3n\"},\"listOrganizations()\":{\"notice\":\"Lista todas las organizaciones\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Organization/OrganizationManager.sol\":\"OrganizationManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Challenges/IChallengeManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface IChallengeManager {\\n    function createChallenge(\\n        uint256 _orgId,\\n        string memory _description,\\n        uint256 _prizeAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _maxWinners\\n    ) external;\\n\\n    function setChallengeValidator(\\n        uint256 _challengeId,\\n        address _validatorAddr,\\n        bytes32 _validatorUID,\\n        uint256 _validationId\\n    ) external;\\n\\n    function getOrganizationId(uint256 _challengeId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79dfda1037ce7fc5a66d07df643da470feac284c960bf2beabc4b67242a9d1e3\",\"license\":\"UNLICENSED\"},\"contracts/Organization/IOrganizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IOrganizationManager {\\n    function isAdmin(uint256 _orgId, address _user) external view returns (bool);\\n    function isUser(uint256 _orgId, address _user) external view returns (bool);\\n    function getTokenOfOrg(uint256 _orgId) external view returns (address);\\n    function getBalanceOfOrg(uint256 _orgId) external view returns (uint256);\\n    function getBalanceOfUser(uint256 _orgId, address _user) external view returns (uint256, string memory);\\n    function transferTokensTo(uint256 _orgId, address _destAddress, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x55b68a72e66096cb2a6e7203f6d589422928d11486633a9897e7cab806e56cc1\",\"license\":\"MIT\"},\"contracts/Organization/OrganizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./OrganizationToken.sol\\\";\\nimport \\\"../Challenges/IChallengeManager.sol\\\";\\nimport {IOrganizationManager} from \\\"./IOrganizationManager.sol\\\";\\n\\ncontract OrganizationManager is IOrganizationManager {\\n\\t// Estructuras\\n\\tstruct Organization {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\taddress token;\\n\\t\\tmapping(address => bool) adminExists;\\n\\t\\tmapping(address => bool) userExists;\\n\\t\\taddress[] admins;\\n\\t\\taddress[] users;\\n\\t\\tbool exists;\\n\\t}\\n\\n\\t// Atributos\\n\\tuint256 public orgCount;\\n\\tmapping(uint256 => Organization) public organizations;\\n\\n\\tuint256[] public organizationIds;\\n\\t// address public cryptoTrophyToken;\\n\\n\\t// Eventos\\n\\tevent OrganizationCreated(\\n\\t\\tuint256 indexed orgId,\\n\\t\\tstring name,\\n\\t\\taddress token\\n\\t);\\n\\n\\t// Modificadores\\n\\tmodifier onlyAdmin(uint256 orgId) {\\n\\t\\trequire(organizations[orgId].adminExists[msg.sender], \\\"Not an admin\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyUser(uint256 orgId) {\\n\\t\\trequire(organizations[orgId].userExists[msg.sender], \\\"Not a user\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction getTokenOfOrg(uint256 _orgId) external view override returns (address) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\t\\treturn org.token;\\n\\t}\\n\\n\\t/// @notice Obtiene el balance de una organizaci\\u00f3n en su token con los 18 decimales\\n\\tfunction getBalanceOfOrg(uint256 _orgId) external view override returns (uint256) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\t\\treturn ERC20(org.token).balanceOf(address(this));\\n\\t}\\n\\n\\t// @return Balance de un usuario en una organizaci\\u00f3n y el nombre del token\\n\\tfunction getBalanceOfUser(uint256 _orgId, address _user) external view override returns (uint256, string memory) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\t\\treturn (ERC20(org.token).balanceOf(_user), ERC20(org.token).symbol());\\n\\t}\\n\\n\\tfunction transferTokensTo(uint256 _orgId, address _destAddress, uint256 _amount) external {\\n\\t\\t// require(msg.sender == address(challengeManagerAddr), \\\"Only ChallengeManager can call\\\");\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\n\\t\\t// Validar balance\\n\\t\\tuint256 orgBalance = ERC20(org.token).balanceOf(address(this));\\n\\t\\trequire(orgBalance >= _amount, \\\"Not enough tokens in OrgManager\\\");\\n\\n\\t\\t// Hacer transferencia\\n\\t\\tERC20(org.token).transfer(_destAddress, _amount);\\n\\t}\\n\\n\\t// Funciones\\n\\n\\t/// @notice Crea una nueva organizaci\\u00f3n\\n\\tfunction createOrganization(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint256 _initialSupply,\\n\\t\\tuint256 _initialEthBacking,\\n\\t\\taddress[] memory _admins,\\n\\t\\taddress[] memory _users\\n\\t) public payable returns (uint256) {\\n\\t\\trequire(msg.value >= _initialEthBacking, \\\"Insufficient ETH backing\\\");\\n\\n\\t\\t// Crear nuevo token de la organizaci\\u00f3n y asignar tokens al contrato\\n\\t\\tOrganizationToken token = new OrganizationToken(\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_initialSupply,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\trequire(address(token) != address(0), \\\"Failed to create token\\\");\\n\\n\\t\\t// Send ETH backing to the token contract if provided\\n\\t\\tif (_initialEthBacking > 0) {\\n\\t\\t\\t(bool success, ) = address(token).call{value: _initialEthBacking}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Failed to send ETH to token contract\\\");\\n\\t\\t}\\n\\n\\t\\t// Crear y registrar organizaci\\u00f3n\\n\\t\\tuint256 orgId = orgCount++;\\n\\t\\tOrganization storage org = organizations[orgId];\\n\\t\\torg.id = orgId;\\n\\t\\torg.name = _name;\\n\\t\\torg.token = address(token);\\n\\t\\torg.exists = true;\\n\\n\\t\\t// Por default, el creador de la organizaci\\u00f3n es admin\\n\\t\\t_addAdmin(orgId, msg.sender);\\n\\n\\t\\tfor (uint256 i = 0; i < _admins.length; i++) {\\n\\t\\t\\t_addAdmin(orgId, _admins[i]);\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < _users.length; i++) {\\n\\t\\t\\t_addUser(orgId, _users[i]);\\n\\t\\t}\\n\\n\\t\\torganizationIds.push(orgId);\\n\\t\\temit OrganizationCreated(orgId, _name, address(token));\\n\\t\\treturn orgId;\\n\\t}\\n\\n\\tfunction _addAdmin(uint256 _orgId, address _admin) internal {\\n\\t\\tif (!organizations[_orgId].adminExists[_admin]) {\\n\\t\\t\\torganizations[_orgId].adminExists[_admin] = true;\\n\\t\\t\\torganizations[_orgId].admins.push(_admin);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Agrega un administrador a una organizaci\\u00f3n\\n\\tfunction addAdmin(uint256 _orgId, address _admin) public onlyAdmin(_orgId) {\\n\\t\\t_addAdmin(_orgId, _admin);\\n\\t}\\n\\n\\tfunction _addUser(uint256 _orgId, address _user) internal {\\n\\t\\tif (!organizations[_orgId].userExists[_user]) {\\n\\t\\t\\torganizations[_orgId].userExists[_user] = true;\\n\\t\\t\\torganizations[_orgId].users.push(_user);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Agrega un usuario a una organizaci\\u00f3n\\n\\tfunction addUser(uint256 _orgId, address _user) public onlyAdmin(_orgId) {\\n\\t\\t_addUser(_orgId, _user);\\n\\t}\\n\\n\\t// Implementaci\\u00f3n de las funciones de la interfaz\\n\\n\\t/// @notice Verifica si una direcci\\u00f3n es administrador de una organizaci\\u00f3n\\n\\tfunction isAdmin(uint256 _orgId, address _user) external view override returns (bool) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\t\\treturn org.adminExists[_user];\\n\\t}\\n\\n\\t/// @notice Verifica si una direcci\\u00f3n es miembro de una organizaci\\u00f3n\\n\\tfunction isUser(uint256 _orgId, address _user) external view override returns (bool) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\t\\treturn org.userExists[_user];\\n\\t}\\n\\n\\t/// @notice Lista todas las organizaciones\\n\\tfunction listOrganizations() public view returns (uint256[] memory) {\\n\\t\\treturn organizationIds;\\n\\t}\\n\\n\\t/// @notice Salir de una organizaci\\u00f3n\\n\\tfunction leaveOrganization(uint256 _orgId) public onlyUser(_orgId) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\torg.userExists[msg.sender] = false;\\n\\n\\t\\t// Remover al usuario de la lista de usuarios\\n\\t\\taddress[] storage users = org.users;\\n\\t\\tfor (uint256 i = 0; i < users.length; i++) {\\n\\t\\t\\tif (users[i] == msg.sender) {\\n\\t\\t\\t\\tusers[i] = users[users.length - 1];\\n\\t\\t\\t\\tusers.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// @notice Devuelve las organizaciones a las que el sender pertenece como admin o usuario, incluyendo nombre y direcci\\u00f3n del token\\n\\tfunction listOrganizationsWithDetails() public view returns (\\n\\t\\tuint256[] memory orgIds,\\n\\t\\tstring[] memory names,\\n\\t\\tstring[] memory tokenSymbols,\\n\\t\\taddress[] memory tokenAddresses,\\n\\t\\tuint256[] memory adminCounts,\\n\\t\\tuint256[] memory userCounts,\\n\\t\\tbool[] memory isMembers\\n\\t) {\\n\\t\\tuint256 count = 0;\\n\\t\\tfor (uint256 i = 0; i < orgCount; i++) {\\n\\t\\t\\tif (organizations[i].adminExists[msg.sender] || organizations[i].userExists[msg.sender]) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\torgIds = new uint256[](count);\\n\\t\\tnames = new string[](count);\\n\\t\\ttokenSymbols = new string[](count);\\n\\t\\ttokenAddresses = new address[](count);\\n\\t\\tadminCounts = new uint256[](count);\\n\\t\\tuserCounts = new uint256[](count);\\n\\t\\tisMembers = new bool[](count);\\n\\n\\t\\tuint256 index = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < orgCount; i++) {\\n\\t\\t\\tif (organizations[i].adminExists[msg.sender] || organizations[i].userExists[msg.sender]) {\\n\\t\\t\\t\\tOrganization storage org = organizations[i];\\n\\t\\t\\t\\torgIds[index] = org.id;\\n\\t\\t\\t\\tnames[index] = org.name;\\n\\n\\t\\t\\t\\ttokenSymbols[index] = ERC20(org.token).symbol();\\n\\t\\t\\t\\ttokenAddresses[index] = org.token;\\n\\n\\t\\t\\t\\tadminCounts[index] = org.admins.length;\\n\\t\\t\\t\\tuserCounts[index] = org.users.length;\\n\\t\\t\\t\\tisMembers[index] = org.userExists[msg.sender] || org.adminExists[msg.sender];\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Obtiene los detalles de una organizaci\\u00f3n por ID\\n\\tfunction getOrganizationDetails(uint256 _orgId) public view returns (\\n\\t\\tuint256 orgId,\\n\\t\\tstring memory name,\\n\\t\\taddress token,\\n\\t\\taddress[] memory admins,\\n\\t\\taddress[] memory users,\\n\\t\\tbool userIsAdmin,\\n\\t\\tbool userIsMember\\n\\t) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\trequire(org.exists, \\\"Organization does not exist\\\");\\n\\n\\t\\torgId = org.id;\\n\\t\\tname = org.name;\\n\\t\\ttoken = org.token;\\n\\t\\tadmins = org.admins;\\n\\t\\tusers = org.users;\\n\\t\\tuserIsAdmin = org.adminExists[msg.sender];\\n\\t\\tuserIsMember = org.userExists[msg.sender];\\n\\t}\\n\\n\\t/// @notice Verifica si una direcci\\u00f3n es miembro de una organizaci\\u00f3n\\n\\tfunction isMember(uint256 _orgId, address _user) public view returns (bool) {\\n\\t\\tOrganization storage org = organizations[_orgId];\\n\\t\\treturn org.userExists[_user];\\n\\t}\\n\\n\\t/// @notice Unirse a una organizaci\\u00f3n\\n\\tfunction joinOrganization(uint256 _orgId) public {\\n\\t\\trequire(organizations[_orgId].exists, \\\"Organization does not exist\\\");\\n\\t\\trequire(!organizations[_orgId].userExists[msg.sender], \\\"Already a member\\\");\\n\\n\\t\\t_addUser(_orgId, msg.sender);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbe611440db32a782f72d7f36abc94add576797c679dbded403403d8ef19dfbbe\",\"license\":\"MIT\"},\"contracts/Organization/OrganizationToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract OrganizationToken is ERC20, Ownable, ERC20Burnable, ReentrancyGuard {\\n    bool public redemptionEnabled;\\n    \\n    event RedemptionEnabled(bool enabled);\\n    event TokensRedeemed(address indexed user, uint256 tokenAmount, uint256 ethAmount);\\n    \\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address initialRecipient\\n    ) ERC20(name, symbol) Ownable(msg.sender) {\\n        _mint(initialRecipient, initialSupply * (10 ** decimals()));\\n        redemptionEnabled = false;\\n    }\\n\\n    // Allow contract to receive ETH\\n    receive() external payable onlyOwner {\\n        redemptionEnabled = true;\\n    }\\n\\n    function getCurrentExchangeRate() public view returns (uint256) {\\n        require(totalSupply() > 0, \\\"No tokens in circulation\\\");\\n        require(address(this).balance > 0, \\\"No ETH available for redemption\\\");\\n        return totalSupply() / address(this).balance;\\n    }\\n\\n    function redeemTokensForEth(uint256 tokenAmount) external nonReentrant {\\n        require(redemptionEnabled, \\\"Redemption not enabled\\\");\\n        require(balanceOf(msg.sender) >= tokenAmount, \\\"Insufficient token balance\\\");\\n        require(tokenAmount > 0, \\\"Amount must be greater than 0\\\");\\n        require(address(this).balance > 0, \\\"No ETH available for redemption\\\");\\n\\n        uint256 currentRate = getCurrentExchangeRate();\\n        uint256 ethAmount = tokenAmount / currentRate;\\n        require(address(this).balance >= ethAmount, \\\"Insufficient ETH in contract\\\");\\n\\n        // Burn tokens first\\n        _burn(msg.sender, tokenAmount);\\n\\n        // Transfer ETH to user\\n        (bool success, ) = msg.sender.call{value: ethAmount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n\\n        emit TokensRedeemed(msg.sender, tokenAmount, ethAmount);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\",\"keccak256\":\"0x3ceeef685e8d4124d6638a348ebcd92079cce37c006b679742b1d3734c1cd194\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmin(uint256,address)": {
        "notice": "Agrega un administrador a una organización"
      },
      "addUser(uint256,address)": {
        "notice": "Agrega un usuario a una organización"
      },
      "createOrganization(string,string,uint256,uint256,address[],address[])": {
        "notice": "Crea una nueva organización"
      },
      "getBalanceOfOrg(uint256)": {
        "notice": "Obtiene el balance de una organización en su token con los 18 decimales"
      },
      "getOrganizationDetails(uint256)": {
        "notice": "Obtiene los detalles de una organización por ID"
      },
      "isAdmin(uint256,address)": {
        "notice": "Verifica si una dirección es administrador de una organización"
      },
      "isMember(uint256,address)": {
        "notice": "Verifica si una dirección es miembro de una organización"
      },
      "isUser(uint256,address)": {
        "notice": "Verifica si una dirección es miembro de una organización"
      },
      "joinOrganization(uint256)": {
        "notice": "Unirse a una organización"
      },
      "leaveOrganization(uint256)": {
        "notice": "Salir de una organización"
      },
      "listOrganizations()": {
        "notice": "Lista todas las organizaciones"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1992,
        "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
        "label": "orgCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1997,
        "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
        "label": "organizations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Organization)1990_storage)"
      },
      {
        "astId": 2000,
        "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
        "label": "organizationIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Organization)1990_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrganizationManager.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)1990_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Organization)1990_storage": {
        "encoding": "inplace",
        "label": "struct OrganizationManager.Organization",
        "members": [
          {
            "astId": 1969,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1971,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1973,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1977,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "adminExists",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1981,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "userExists",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1984,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "admins",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1987,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "users",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1989,
            "contract": "contracts/Organization/OrganizationManager.sol:OrganizationManager",
            "label": "exists",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}