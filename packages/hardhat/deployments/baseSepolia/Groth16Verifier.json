{
  "address": "0x8d21f7C297798673e00EC6D1F8C9DB1F85B14AA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c8d68fe3ce16343ddf1d55afd01c5070f9815c45ae24c82b9d1eadd5f554d6a",
  "receipt": {
    "to": null,
    "from": "0x6875548D549dB2D6D99B29E0BA6ea7f7C53739D1",
    "contractAddress": "0x8d21f7C297798673e00EC6D1F8C9DB1F85B14AA6",
    "transactionIndex": 1,
    "gasUsed": "350072",
    "logsBloom": "0x
    "blockHash": "0x02eb57df86b507b51d301228fcc9f87dfa293709539d000250c069d55e064b46",
    "transactionHash": "0x6c8d68fe3ce16343ddf1d55afd01c5070f9815c45ae24c82b9d1eadd5f554d6a",
    "logs": [],
    "blockNumber": 23789599,
    "cumulativeGasUsed": "393887",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "105bc1b44b7c0353cc4b36f9e49e2962",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Validator/Support/Groth16Verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Validator/Support/Groth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 13046268567224917008448790672865960726213261420959017383624462474361634255185;\\n    uint256 constant alphay  = 2487632655904670113440113271507616617857855505985662826865582326473076355556;\\n    uint256 constant betax1  = 14953050727236795319429542222364891784804504020354734858612250488860940651661;\\n    uint256 constant betax2  = 20233511785893367891121767836993211744091549887962983918542462251757468848940;\\n    uint256 constant betay1  = 7276676711481195093670846031653492621159296165001751579681453265585839399693;\\n    uint256 constant betay2  = 20132671190895711117195302979232631605153374165653757403772803662920667464107;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 19523308788079122140479538156160693915487227929630270393769994719291760736522;\\n    uint256 constant IC0y = 13163165622613948868632969002830779802143833446382565153754591499319329338513;\\n    \\n    uint256 constant IC1x = 6641276449599469660487041859439935839534648132302035484067902716294381777976;\\n    uint256 constant IC1y = 20819130745850225398086679152374747851561423161367796928116441877725174632273;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x6427071ad589f1032af097cf4d62ed123746e88951d22be269e7b73da3d4af9d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061055e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104c2565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f2b29cd1a6297cacd68e894ab8017fc0fc882a6436ee38db552e352bc89a4790a85527f1d1a1674e62fed23cd102f82cf5c88c77ada1987232712f2a7ae25d054aab49160208601526000608086018661019a87357f2e0735de250d31e13a12b3fe5a85428f4c2ece4e35ce2f5a4366d5bb7c810f517f0eaed44a8d7daa0969f8f5f86cfaac0f7ed142c437d5fcd231a9421d4441343884610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f1cd7ed242175f89a39fe1bb28c2347325d4335bb2674f0ac4b9bc7af290f715160c08201527f057ff33f7ab5090f73fd8554bf6102cc33720b37f8c51c0994080db5b229b1e460e08201527f210f20754a42834a3acbe0d85da9e81894bb16de5c23a84b80ec52bc75df4c8d6101008201527f2cbbc307a9946e3c6c2c1e644e8a87ff2b154a4b9de85831fcac0a89b733132c6101208201527f101673fc25dcc0d132a7187724212694e86bfc8ebcf29b2c0a8c95685cc1e30d6101408201527f2c82b0261c41bfa4bafeb1de8543875357d0ea334bb2aeadfca29b1d75f981ab610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f818486888a6100fd565b90508060005260206000f35b80604081018310156104bc57600080fd5b92915050565b6000806000806101208086880312156104da57600080fd5b6104e487876104ab565b945060c08601878111156104f757600080fd5b60408701945061050788826104ab565b93505086818701111561051957600080fd5b5092959194509261010001915056fea26469706673582212200a797edd32a6528f7268bf9011712f2e03ec38bd318c9221972a033fd292f31f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104c2565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f2b29cd1a6297cacd68e894ab8017fc0fc882a6436ee38db552e352bc89a4790a85527f1d1a1674e62fed23cd102f82cf5c88c77ada1987232712f2a7ae25d054aab49160208601526000608086018661019a87357f2e0735de250d31e13a12b3fe5a85428f4c2ece4e35ce2f5a4366d5bb7c810f517f0eaed44a8d7daa0969f8f5f86cfaac0f7ed142c437d5fcd231a9421d4441343884610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f1cd7ed242175f89a39fe1bb28c2347325d4335bb2674f0ac4b9bc7af290f715160c08201527f057ff33f7ab5090f73fd8554bf6102cc33720b37f8c51c0994080db5b229b1e460e08201527f210f20754a42834a3acbe0d85da9e81894bb16de5c23a84b80ec52bc75df4c8d6101008201527f2cbbc307a9946e3c6c2c1e644e8a87ff2b154a4b9de85831fcac0a89b733132c6101208201527f101673fc25dcc0d132a7187724212694e86bfc8ebcf29b2c0a8c95685cc1e30d6101408201527f2c82b0261c41bfa4bafeb1de8543875357d0ea334bb2aeadfca29b1d75f981ab610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f818486888a6100fd565b90508060005260206000f35b80604081018310156104bc57600080fd5b92915050565b6000806000806101208086880312156104da57600080fd5b6104e487876104ab565b945060c08601878111156104f757600080fd5b60408701945061050788826104ab565b93505086818701111561051957600080fd5b5092959194509261010001915056fea26469706673582212200a797edd32a6528f7268bf9011712f2e03ec38bd318c9221972a033fd292f31f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}