name: Deploy to EC2

on:
  push:
    branches:
      - main
jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ organization-backend, ponder ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  deploy:
    name: Deploy to EC2
    needs: build_and_push
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      PORT: ${{ vars.PORT }}
      DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
      PONDER_SCHEMA: ${{ vars.PONDER_SCHEMA }}
      PONDER_PORT: ${{ vars.PONDER_PORT }}
      PONDER_RPC_URL_84532: ${{ vars.PONDER_RPC_URL_84532 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
      - name: Add EC2 host to known_hosts
        run: ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Create app dir on EC2
        run: |
          ssh -o StrictHostKeyChecking=no "${{ vars.EC2_USER }}"@"${{ vars.EC2_HOST }}" \
          "mkdir -p ~/app"
      - name: Copy compose file to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml \
            "${{ vars.EC2_USER }}"@"${{ vars.EC2_HOST }}":~/app/
      - name: Install Docker, Compose & Deploy
        run: |
          ssh -o StrictHostKeyChecking=no "${{ vars.EC2_USER }}"@"${{ vars.EC2_HOST }}" <<EOF
          set -e
          sudo systemctl enable --now docker.service containerd.service
          if ! command -v docker >/dev/null; then
          sudo dnf install --allowerasing -y \
          docker containerd runc container-selinux cni-plugins \
          oci-add-hooks amazon-ecr-credential-helper udica
          sudo systemctl enable --now docker containerd
          echo "Docker installed"
          else
          echo "Docker was already installed"
          fi
          
          if ! docker compose version >/dev/null; then
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -sSL \
          https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$(uname -m) \
          -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
          echo "Docker Compose installed"
          else
          echo "Docker Compose was already installed"
          fi
          
          mkdir -p ~/app
          cd ~/app
          
          cat > .env <<EOT
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          PORT=${PORT}
          DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
          DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
          DATABASE_SCHEMA=${PONDER_SCHEMA}
          PONDER_PORT=${PONDER_PORT}
          PONDER_RPC_URL_84532=${PONDER_RPC_URL_84532}
          NODE_ENV=production
          EOT
          
          sudo docker compose -f docker-compose.prod.yml exec -T db psql \
              -U "$POSTGRES_USER" -d "$POSTGRES_DB" \
              -c "DROP SCHEMA IF EXISTS ${PONDER_SCHEMA} CASCADE; \
                  DROP SCHEMA IF EXISTS ponder_sync CASCADE;"
          sudo docker compose -f docker-compose.prod.yml pull
          sudo docker compose -f docker-compose.prod.yml up -d
          
          echo "Deployment completed"
          EOF